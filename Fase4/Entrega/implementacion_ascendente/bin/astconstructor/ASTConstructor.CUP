package astconstructor;

import java_cup.runtime.*;
import lex.TinyLexicalAnalyzer;
import lex.LexicalUnit;
import err.TinyErrorMgmt;
import ast.*;

scan with {: return getScanner().next_token(); :};
action code {:
	private ASTiny as = new ASTiny();
:};
parser code{:
	private TinyErrorMgmt error;
	public void syntax_error(Symbol lexicalUnit){
		error.syntaxError((LexicalUnit) lexicalUnit);
	}
:};
init with{:
	error = new TinyErrorMgmt();
	TinyLexicalAnalyzer lex = (TinyLexicalAnalyzer)getScanner();
	lex.setErrorMgmt(error);
:};

terminal 	String  INT, REAL, BOOL, IDEN, END, TRUE, FALSE,
					EQUAL, PLUS, MINUS, MULT, DIV, AND, OR, NOT, 
					MAYOR, MINOR, MAYOREQUAL, MINOREQUAL, EQUIV, 
					NONEQUIV, NEG, OPPAR, CLPAR, SEMICOLON, NUMREAL,
					NUMINT;

non terminal S;
non terminal Ds Ds, D;
non terminal T T;
non terminal Is Is, I;
non terminal E E0, E1, E2, E3, E4, E5;

	S ::= Ds: ds END Is: is
		{: RESULT=as.decIns(ds, is); :};
	Ds::= D: dec
		{: RESULT=as.dSimple(dec.id(), dec.tipoT()); :};
	Ds::= Ds: decs SEMICOLON D:dec
		{: RESULT=as.dCompuesta(decs, dec.id(), dec.tipoT()); :};
	D ::= T: typ IDEN: id_lex
		{: RESULT=as.dSimple(id_lex, typ); :};
	T ::= INT
		{: RESULT=as.tInt(); :};
	T ::= REAL
		{: RESULT=as.tReal(); :};
	T ::= BOOL
		{: RESULT=as.tBool(); :};
	Is ::= I: ins
		{: RESULT=as.iSimple(ins.id(), ins.exp()); :};
	Is ::= Is: inss SEMICOLON I:ins
		{: RESULT=as.iCompuesta(inss, ins.id(), ins.exp()); :};
	I ::= IDEN: id_lex EQUAL E0: e0
		{: RESULT=as.iSimple(id_lex, e0); :};
	E0 ::= E0: e0 PLUS E1: e1
		{: RESULT= as.plus(e0, e1); :};
	E0 ::= E1: e1a MINUS E1: e1b
		{: RESULT= as.subtraction(e1a, e1b); :};
	E0 ::= E1: e1
		{: RESULT=e1; :};
	E1 ::= E2: e2 AND E1: e1
		{: RESULT=as.and(e2, e1); :};
	E1 ::= E2: e2a OR E2: e2b
		{: RESULT=as.or(e2a, e2b); :};
	E1 ::= E2: e2
		{: RESULT=e2; :};
	E2 ::= E3: e3a MINOR E3: e3b
		{: RESULT=as.minor(e3a, e3b); :};
	E2 ::= E3: e3a MAYOR E3: e3b
		{: RESULT=as.mayor(e3a, e3b); :};
	E2 ::= E3: e3a MINOREQUAL E3: e3b
		{: RESULT=as.minorEqual(e3a, e3b); :};
	E2 ::= E3: e3a MAYOREQUAL E3: e3b
		{: RESULT=as.mayorEqual(e3a, e3b); :};
	E2 ::= E3: e3a EQUIV E3: e3b
		{: RESULT=as.equiv(e3a, e3b); :};
	E2 ::= E3: e3a NONEQUIV E3: e3b
		{: RESULT=as.nonEquiv(e3a, e3b); :};
	E2 ::= E3: e3
		{: RESULT=e3; :};
	E3 ::= E3: e3 MULT E4: e4
		{: RESULT=as.mult(e3, e4); :};
	E3 ::= E3: e3 DIV E4: e4
		{: RESULT=as.div(e3, e4); :};
	E3 ::= E4: e4
		{: RESULT=e4; :};
	E4 ::= NEG E4: e4
		{: RESULT=as.neg(e4); :};
	E4 ::= NOT E5: e5
		{: RESULT=as.not(e5); :};
	E4 ::= E5: e5
		{: RESULT=e5; :};
	E5 ::= OPPAR E0: e0 CLPAR
		{: RESULT=e0; :};
	E5 ::= IDEN: id_lex
		{: RESULT=as.id(id_lex); :};
	E5 ::= NUMREAL: real_lex
		{: RESULT=as.numReal(real_lex); :};
	E5 ::= NUMINT: int_lex
		{: RESULT=as.numInt(int_lex); :};
	E5 ::= TRUE
		{: RESULT=as.eTrue(); :};
	E5 ::= FALSE
		{: RESULT=as.eFalse(); :};

