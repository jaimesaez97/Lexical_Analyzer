/* ASTProyectConstructor.java */
/* Generated By:JavaCC: Do not edit this line. ASTProyectConstructor.java */
package astconstructor;

import ast.*;

public class ASTProyectConstructor implements ASTProyectConstructorConstants {
        private ASProyect as = new ASProyect();
        private final static int MAYOR=0;
        private final static int MINOR=1;
        private final static int MAYOREQUAL=2;
        private final static int MINOREQUAL=3;
        private final static int EQUIV=4;
        private final static int NONEQUIV=5;

  final public Programa Programa() throws ParseException {RPrograma ast; Instrucciones ins;
    ins = Instrucciones();
    ast = RPrograma(ins);
{if ("" != null) return as.prog(ast,ins);}
    throw new Error("Missing return statement in function");
  }

  final public RPrograma RPrograma(Instrucciones ins) throws ParseException {Declaraciones decs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case var:
    case proc:
    case type:{
      decs = Declaraciones();
      jj_consume_token(end);
{if ("" != null) return as.decIns(ins, decs);}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
{if ("" != null) return as.progIns(ins);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Declaraciones Declaraciones() throws ParseException {Declaracion dec; Declaraciones decs;
    dec = Declaracion();
    decs = Declaraciones2(as.dSimple(dec));
{if ("" != null) return decs;}
    throw new Error("Missing return statement in function");
  }

  final public Declaraciones Declaraciones2(Declaraciones decs) throws ParseException {Declaracion dec; Declaraciones decs2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case semicolon:{
      jj_consume_token(semicolon);
      dec = Declaracion();
      decs2 = Declaraciones2(decs);
{if ("" != null) return as.dCompuesta(decs2, dec);}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
{if ("" != null) return decs;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Declaracion Declaracion() throws ParseException {T tipo; Token id; Parametros param; B bloque;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case var:{
      jj_consume_token(var);
      tipo = T();
      id = jj_consume_token(identificador);
{if ("" != null) return as.decVar (tipo, id.image);}
      break;
      }
    case type:{
      jj_consume_token(type);
      tipo = T();
      id = jj_consume_token(identificador);
{if ("" != null) return as.decTipo(tipo, id.image);}
      break;
      }
    case proc:{
      jj_consume_token(proc);
      id = jj_consume_token(identificador);
      param = Parametros();
      bloque = B();
{if ("" != null) return as.decProc(id.image, param, bloque);}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Parametros Parametros() throws ParseException {Sp param;
    jj_consume_token(parAb);
    param = Sp();
    jj_consume_token(parCe);
{if ("" != null) return as.secParam(param);}
    throw new Error("Missing return statement in function");
  }

  final public Sp Sp() throws ParseException {T tipo; Token id; Sp sp;
    tipo = T();
    id = jj_consume_token(identificador);
    sp = Sp2(as.parSimple(tipo, id.image));
{if ("" != null) return sp;}
    throw new Error("Missing return statement in function");
  }

  final public Sp Sp2(Sp param) throws ParseException {T tipo; Token id; Sp sp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case identificador:
    case iint:
    case real:
    case bool:
    case array:
    case record:
    case sstring:
    case pointer:{
      tipo = T();
      id = jj_consume_token(identificador);
      sp = Sp2(as.parCompuesta(tipo, id.image, param));
{if ("" != null) return sp;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
{if ("" != null) return param;}
    }
    throw new Error("Missing return statement in function");
  }

  final public T T() throws ParseException {Token t; T tipo; Sc c;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case iint:{
      jj_consume_token(iint);
{if ("" != null) return as.tInt();}
      break;
      }
    case real:{
      jj_consume_token(real);
{if ("" != null) return as.tReal();}
      break;
      }
    case bool:{
      jj_consume_token(bool);
{if ("" != null) return as.tBool();}
      break;
      }
    case sstring:{
      jj_consume_token(sstring);
{if ("" != null) return as.tString();}
      break;
      }
    case identificador:{
      t = jj_consume_token(identificador);
{if ("" != null) return as.tIden(t.image);}
      break;
      }
    case array:{
      jj_consume_token(array);
      jj_consume_token(corAb);
      t = jj_consume_token(numInt);
      jj_consume_token(corCe);
      jj_consume_token(of);
      tipo = T();
{if ("" != null) return as.tArray(t.image, tipo);}
      break;
      }
    case record:{
      jj_consume_token(record);
      jj_consume_token(llaAb);
      c = Campos();
      jj_consume_token(llaCe);
{if ("" != null) return as.tRecord(c);}
      break;
      }
    case pointer:{
      jj_consume_token(pointer);
      tipo = T();
{if ("" != null) return as.tPointer(tipo);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Sc Campos() throws ParseException {T tipo; Token id; Sc cs;
    id = jj_consume_token(identificador);
    tipo = T();
    cs = Campos2(as.campoSimple(tipo, id.image));
{if ("" != null) return cs;}
    throw new Error("Missing return statement in function");
  }

  final public Sc Campos2(Sc c2) throws ParseException {T tipo; Token id; Sc cs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case semicolon:{
      jj_consume_token(semicolon);
      tipo = T();
      id = jj_consume_token(identificador);
      cs = Campos2(as.campoCompuesto(tipo, id.image, c2));
{if ("" != null) return cs;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return c2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Instrucciones Instrucciones() throws ParseException {Instruccion ins; Instrucciones instr;
    ins = Instruccion();
    instr = Instrucciones2(as.iSimple(ins));
{if ("" != null) return instr;}
    throw new Error("Missing return statement in function");
  }

  final public Instrucciones Instrucciones2(Instrucciones ins2) throws ParseException {Instruccion ins; Instrucciones instr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case semicolon:{
      jj_consume_token(semicolon);
      ins = Instruccion();
      instr = Instrucciones2(as.iCompuesta(ins2, ins));
{if ("" != null) return instr;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
{if ("" != null) return ins2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Instruccion Instruccion() throws ParseException {E e0_0; E e0_1; Instrucciones si1; Instrucciones si2; Token t; B bloque; Parametros p;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:
    case menos:{
      e0_0 = E0();
      jj_consume_token(64);
      e0_1 = E0();
{if ("" != null) return as.insAsig(e0_0, e0_1);}
      break;
      }
    case iff:{
      jj_consume_token(iff);
      e0_0 = E0();
      jj_consume_token(then);
      si1 = Instrucciones();
      jj_consume_token(endif);
{if ("" != null) return as.insIf(e0_0, si1);}
      break;
      }{
      jj_consume_token(iff);
      e0_0 = E0();
      jj_consume_token(then);
      si1 = Instrucciones();
      jj_consume_token(eelse);
      si2 = Instrucciones();
      jj_consume_token(endif);
{if ("" != null) return as.insIfElse(e0_0, si1, si2);}
      break;
      }
    case wwhile:{
      jj_consume_token(wwhile);
      e0_0 = E0();
      jj_consume_token(doo);
      si1 = Instrucciones();
      jj_consume_token(endwhile);
{if ("" != null) return as.insWhile(e0_0, si1);}
      break;
      }
    case read:{
      jj_consume_token(read);
      e0_0 = E0();
{if ("" != null) return as.insRead(e0_0);}
      break;
      }
    case write:{
      jj_consume_token(write);
      e0_0 = E0();
{if ("" != null) return as.insWrite(e0_0);}
      break;
      }
    case nl:{
      jj_consume_token(nl);
{if ("" != null) return as.insNl();}
      break;
      }
    case nnew:{
      jj_consume_token(nnew);
      e0_0 = E0();
{if ("" != null) return as.insNew(e0_0);}
      break;
      }
    case ddelete:{
      jj_consume_token(ddelete);
      e0_0 = E0();
{if ("" != null) return as.insDelete(e0_0);}
      break;
      }
    case call:{
      jj_consume_token(call);
      t = jj_consume_token(identificador);
      p = Parametros();
{if ("" != null) return as.insCall(t.image, p);}
      bloque = B();
{if ("" != null) return as.insBloque(bloque);}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public B B() throws ParseException {Programa p;
    jj_consume_token(llaAb);
    p = Programa();
    jj_consume_token(llaCe);
{if ("" != null) return as.bloque(p);}
    throw new Error("Missing return statement in function");
  }

  final public E E0() throws ParseException {E e1; E e0;
    e1 = E1();
    e0 = EE0(e1);
{if ("" != null) return e0;}
    throw new Error("Missing return statement in function");
  }

  final public E EE0(E e1) throws ParseException {E e0; E e1_1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mas:{
      jj_consume_token(mas);
      e0 = E0();
{if ("" != null) return as.suma(e1, e0);}
      break;
      }
    case menos:{
      jj_consume_token(menos);
      e1_1 = E1();
{if ("" != null) return as.resta(e1, e1_1);}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
{if ("" != null) return e1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E1() throws ParseException {E e2; E e1;
    e2 = E2();
    e1 = EE1(e2);
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public E EE1(E e2_1) throws ParseException {E e2; E e1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case and:{
      jj_consume_token(and);
      e2 = E2();
      e1 = EE1(as.and(e2_1, e2));
{if ("" != null) return e1;}
      break;
      }
    case or:{
      jj_consume_token(or);
      e2 = E2();
      e1 = EE1(as.or(e2_1, e2));
{if ("" != null) return e1;}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
{if ("" != null) return e2_1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E2() throws ParseException {E e3; E e2;
    e3 = E3();
    e2 = EE2(e3);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public E EE2(E e3_1) throws ParseException {E e3; E e2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mayor:{
      jj_consume_token(mayor);
      e3 = E3();
      e2 = EE2(as.mayor(e3_1, e3));
{if ("" != null) return e2;}
      break;
      }
    case menor:{
      jj_consume_token(menor);
      e3 = E3();
      e2 = EE2(as.menor(e3_1, e3));
{if ("" != null) return e2;}
      break;
      }
    case mayorIgual:{
      jj_consume_token(mayorIgual);
      e3 = E3();
      e2 = EE2(as.mayorIgual(e3_1, e3));
{if ("" != null) return e2;}
      break;
      }
    case menorIgual:{
      jj_consume_token(menorIgual);
      e3 = E3();
      e2 = EE2(as.menorIgual(e3_1, e3));
{if ("" != null) return e2;}
      break;
      }
    case equiv:{
      jj_consume_token(equiv);
      e3 = E3();
      e2 = EE2(as.equiv(e3_1, e3));
{if ("" != null) return e2;}
      break;
      }
    case nonEquiv:{
      jj_consume_token(nonEquiv);
      e3 = E3();
      e2 = EE2(as.nonEquiv(e3_1, e3));
{if ("" != null) return e2;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
{if ("" != null) return e3_1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public E E3() throws ParseException {E e4; E e3;
    e4 = E4();
    e3 = EE3(e4);
{if ("" != null) return e3;}
    throw new Error("Missing return statement in function");
  }

  final public E EE3(E e4_1) throws ParseException {E e4; E e3;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mult:{
      jj_consume_token(mult);
      e4 = E4();
      e3 = EE3(as.mult(e4_1, e4));
{if ("" != null) return e3;}
      break;
      }
    case div:{
      jj_consume_token(div);
      e4 = E4();
      e3 = EE3(as.div(e4_1, e4));
{if ("" != null) return e3;}
      break;
      }
    case resto:{
      jj_consume_token(resto);
      e4 = E4();
      e3 = EE3(as.resto(e4_1, e4));
{if ("" != null) return e3;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public E E4() throws ParseException {E e4; E e5;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case not:{
      jj_consume_token(not);
      e4 = E4();
{if ("" != null) return as.not(e4);}
      break;
      }
    case menos:{
      jj_consume_token(menos);
      e5 = E5();
{if ("" != null) return as.neg(e5);}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public E E5() throws ParseException {E e0; E e6; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case corAb:{
      jj_consume_token(corAb);
      e0 = E0();
      jj_consume_token(corCe);
{if ("" != null) return as.index(e0);}
      break;
      }
    case punto:{
      jj_consume_token(punto);
      t = jj_consume_token(identificador);
{if ("" != null) return as.access(t.image);}
      break;
      }
    case flecha:{
      jj_consume_token(flecha);
      t = jj_consume_token(identificador);
{if ("" != null) return as.access(t.image);}
      break;
      }
    case identificador:
    case numInt:
    case numReal:
    case cadena:
    case ttrue:
    case ffalse:
    case nulo:
    case parAb:
    case mult:{
      e6 = E6();
{if ("" != null) return e6;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public E E6() throws ParseException {E e6; E e7;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case mult:{
      jj_consume_token(mult);
      e6 = E6();
{if ("" != null) return e6;}
      break;
      }
    case identificador:
    case numInt:
    case numReal:
    case cadena:
    case ttrue:
    case ffalse:
    case nulo:
    case parAb:{
      e7 = E7();
{if ("" != null) return e7;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public E E7() throws ParseException {Token t; E e0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case parAb:{
      jj_consume_token(parAb);
      e0 = E0();
      jj_consume_token(parCe);
{if ("" != null) return e0;}
      break;
      }
    case numInt:{
      t = jj_consume_token(numInt);
{if ("" != null) return as.numInt(t.image);}
      break;
      }
    case numReal:{
      t = jj_consume_token(numReal);
{if ("" != null) return as.numReal(t.image);}
      break;
      }
    case ttrue:{
      t = jj_consume_token(ttrue);
{if ("" != null) return as.ttrue();}
      break;
      }
    case ffalse:{
      t = jj_consume_token(ffalse);
{if ("" != null) return as.ffalse();}
      break;
      }
    case cadena:{
      t = jj_consume_token(cadena);
{if ("" != null) return as.cadena(t.image);}
      break;
      }
    case identificador:{
      t = jj_consume_token(identificador);
{if ("" != null) return as.iden(t.image);}
      break;
      }
    case nulo:{
      t = jj_consume_token(nulo);
{if ("" != null) return as.nulo();}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ASTProyectConstructorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x28800000,0x0,0x28800000,0x81000080,0x81000080,0x0,0x0,0x160a0000,0x0,0x600000,0x0,0x0,0x2000000,0xf980,0xf980,0xf980,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x800,0x0,0x361,0x361,0x800,0x800,0x20009a,0x600000,0x0,0xfc000000,0x3800000,0x200000,0x98a000,0x808000,0x8000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public ASTProyectConstructor(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ASTProyectConstructor(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ASTProyectConstructorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ASTProyectConstructor(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ASTProyectConstructorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ASTProyectConstructor(ASTProyectConstructorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ASTProyectConstructorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
