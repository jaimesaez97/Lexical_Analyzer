/* Generated By:JavaCC: Do not edit this line. ASTProyectConstructorConstants.java */
package astconstructor;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ASTProyectConstructorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letter = 1;
  /** RegularExpression Id. */
  int digPos = 2;
  /** RegularExpression Id. */
  int posZero = 3;
  /** RegularExpression Id. */
  int digit = 4;
  /** RegularExpression Id. */
  int identificador = 7;
  /** RegularExpression Id. */
  int numInt = 8;
  /** RegularExpression Id. */
  int decimal = 9;
  /** RegularExpression Id. */
  int exponencial = 10;
  /** RegularExpression Id. */
  int numReal = 11;
  /** RegularExpression Id. */
  int cadena = 12;
  /** RegularExpression Id. */
  int ttrue = 13;
  /** RegularExpression Id. */
  int ffalse = 14;
  /** RegularExpression Id. */
  int nulo = 15;
  /** RegularExpression Id. */
  int of = 16;
  /** RegularExpression Id. */
  int iff = 17;
  /** RegularExpression Id. */
  int endif = 18;
  /** RegularExpression Id. */
  int nl = 19;
  /** RegularExpression Id. */
  int doo = 20;
  /** RegularExpression Id. */
  int or = 21;
  /** RegularExpression Id. */
  int and = 22;
  /** RegularExpression Id. */
  int var = 23;
  /** RegularExpression Id. */
  int iint = 24;
  /** RegularExpression Id. */
  int not = 25;
  /** RegularExpression Id. */
  int nnew = 26;
  /** RegularExpression Id. */
  int proc = 27;
  /** RegularExpression Id. */
  int read = 28;
  /** RegularExpression Id. */
  int type = 29;
  /** RegularExpression Id. */
  int eelse = 30;
  /** RegularExpression Id. */
  int real = 31;
  /** RegularExpression Id. */
  int bool = 32;
  /** RegularExpression Id. */
  int call = 33;
  /** RegularExpression Id. */
  int then = 34;
  /** RegularExpression Id. */
  int wwhile = 35;
  /** RegularExpression Id. */
  int write = 36;
  /** RegularExpression Id. */
  int array = 37;
  /** RegularExpression Id. */
  int record = 38;
  /** RegularExpression Id. */
  int ddelete = 39;
  /** RegularExpression Id. */
  int sstring = 40;
  /** RegularExpression Id. */
  int pointer = 41;
  /** RegularExpression Id. */
  int endwhile = 42;
  /** RegularExpression Id. */
  int semicolon = 43;
  /** RegularExpression Id. */
  int end = 44;
  /** RegularExpression Id. */
  int corAb = 45;
  /** RegularExpression Id. */
  int corCe = 46;
  /** RegularExpression Id. */
  int parAb = 47;
  /** RegularExpression Id. */
  int parCe = 48;
  /** RegularExpression Id. */
  int llaAb = 49;
  /** RegularExpression Id. */
  int llaCe = 50;
  /** RegularExpression Id. */
  int punto = 51;
  /** RegularExpression Id. */
  int flecha = 52;
  /** RegularExpression Id. */
  int menos = 53;
  /** RegularExpression Id. */
  int mas = 54;
  /** RegularExpression Id. */
  int mult = 55;
  /** RegularExpression Id. */
  int div = 56;
  /** RegularExpression Id. */
  int resto = 57;
  /** RegularExpression Id. */
  int mayor = 58;
  /** RegularExpression Id. */
  int mayorIgual = 59;
  /** RegularExpression Id. */
  int menor = 60;
  /** RegularExpression Id. */
  int menorIgual = 61;
  /** RegularExpression Id. */
  int equiv = 62;
  /** RegularExpression Id. */
  int nonEquiv = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letter>",
    "<digPos>",
    "<posZero>",
    "<digit>",
    "<token of kind 5>",
    "<token of kind 6>",
    "<identificador>",
    "<numInt>",
    "<decimal>",
    "<exponencial>",
    "<numReal>",
    "\"\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"of\"",
    "\"if\"",
    "\"endif\"",
    "\"nl\"",
    "\"do\"",
    "\"or\"",
    "\"and\"",
    "\"var\"",
    "\"int\"",
    "\"not\"",
    "\"new\"",
    "\"proc\"",
    "\"read\"",
    "\"type\"",
    "\"else\"",
    "\"real\"",
    "\"bool\"",
    "\"call\"",
    "\"then\"",
    "\"while\"",
    "\"write\"",
    "\"array\"",
    "\"record\"",
    "\"delete\"",
    "\"string\"",
    "\"pointer\"",
    "\"endwhile\"",
    "\";\"",
    "\"&&\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\"->\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"=\"",
  };

}
