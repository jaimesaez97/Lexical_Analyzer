package astconstructor;

import java_cup.runtime.*;
import lex.ProyectLexicalAnalyzer;
import lex.LexicalClass;
import lex.LexicalUnit;
import err.ProyectErrorMgmt;
import ast.*;

scan with {: return getScanner().next_token(); :};
action code {:
	private ASProyect as = new ASProyect();
:};
parser code{:
	private ProyectErrorMgmt error;
	public void syntax_error(Symbol lexicalUnit){
		error.syntaxError((LexicalUnit) lexicalUnit);
	}
:};
init with{:
	error = new ProyectErrorMgmt();
	ProyectLexicalAnalyzer lex = (ProyectLexicalAnalyzer)getScanner();
	lex.setErrorMgmt(error);
:};

terminal 	String  CORCE, RESTO, MULT, INT, ARRAY, WRITE, DELETE,
					LLACE, NOT, MENORIGUAL, AND, IGUAL, RECORD, TYPE,
					OR, NONEQUIV, BOOL, CALL, PARAB, DIV, IF, ENDWHILE,
					OF, MAYORIGUAL, PYCOMA, TRUE, NEW, COMA,
					CADENA, MENOS, NULL, MENOR, NUMREAL, REAL, MAYOR,
					FLECHA, CORAB, ENDIF, PARCE, ELSE, PUNTO, NL, READ,
					IDEN, WHILE, EQUIV, THEN, NUMINT, END, PROC, STRING,
					POINTER, FALSE, VAR, UMPERSAND, LLAAB, DO, MAS;
					
non terminal Programa Programa;
non terminal Declaraciones Sd;
non terminal Declaracion D;
non terminal Parametros Parametros;
non terminal Sp Sp;
non terminal T T;
non terminal Sc Sc;
non terminal Instrucciones Si;
non terminal Instruccion I;
non terminal B B;
non terminal E E0, E1, E2, E3, E4, E5, E6, E7;

	Programa::= Si: si
		{: RESULT= as.progIns(si); :};
	Programa::= Sd: sd END Si: si
		{: RESULT= as.decIns(si, sd); :};
	Sd::= D: dec
		{: RESULT= as.dSimple(dec); :};
	Sd::= D: dec PYCOMA Sd: sd
		{: RESULT= as.dCompuesta(sd, dec); :};
	D::= VAR T: tipo IDEN: id_lex
		{: RESULT= as.decVar(tipo, id_lex); :};
	D::= TYPE T: tipo IDEN: id_lex
		{: RESULT= as.decTipo(tipo, id_lex); :};
	D::= PROC IDEN: id_lex Parametros: param B: bloque
		{: RESULT= as.decProc(id_lex, param, bloque); :};
	Parametros::= PARAB Sp: sp PARCE
		{: RESULT= as.secParam(sp); :};
	Sp::= T: t UMPERSAND IDEN: id_lex
		{: RESULT= as.parSimple(t, id_lex); :};
	Sp::= T: t UMPERSAND IDEN: id_lex COMA Sp: sp
		{: RESULT= as.parCompuesta(t, id_lex, sp); :};
	Sp::= T: t IDEN: id_lex
		{: RESULT= as.parSimple(t, id_lex); :};
	Sp::= T: t IDEN: id_lex COMA Sp: sp
		{: RESULT= as.parCompuesta(t, id_lex, sp); :};
	T::= INT
		{: RESULT= as.tInt(); :};
	T::= REAL
		{: RESULT= as.tReal(); :};
	T::= BOOL
		{: RESULT= as.tBool(); :};
	T::= STRING
		{: RESULT= as.tString(); :};
	T::= IDEN: id_lex
		{: RESULT= as.tIden(id_lex); :};
	T::= ARRAY CORAB NUMINT: tam CORCE OF T: tipo
		{: RESULT= as.tArray(tam, tipo); :};
	T::= RECORD LLAAB Sc: sc LLACE
		{: RESULT= as.tRecord(sc); :};
	T::= POINTER T: tipo
		{: RESULT= as.tPointer(tipo); :};
	Sc::= T: t IDEN: id_lex
		{: RESULT= as.campoSimple(t, id_lex); :};
	Sc::= T: t IDEN: id_lex PYCOMA Sc: sc
		{: RESULT= as.campoCompuesto(t, id_lex, sc); :};
	Si::= I: ins
		{: RESULT= as.iSimple(ins); :};
	Si::= I: ins PYCOMA Si: si
		{: RESULT= as.iCompuesta(si, ins); :};
	I::= E0: e0_0 IGUAL E0:e0_1
		{: RESULT= as.insAsig(e0_0, e0_1); :};
	I::= IF E0: e0 THEN Si: si ENDIF
		{: RESULT= as.insIf(e0, si); :};
	I::= IF E0: e0 THEN Si: si0 ELSE Si: si1 ENDIF
		{: RESULT= as.insIfElse(e0, si0, si1); :};
	I::= WHILE E0: e0 DO Si: si ENDWHILE
		{: RESULT= as.insWhile(e0, si); :};
	I::= READ E0: e0
		{: RESULT= as.insRead(e0); :};
	I::= WRITE E0: e0
		{: RESULT= as.insWrite(e0); :};
	I::= NL
		{: RESULT= as.insNl(); :};
	I::= NEW E0: e0
		{: RESULT= as.insNew(e0); :};
	I::= DELETE E0: e0
		{: RESULT= as.insDelete(e0); :};
	I::= CALL IDEN: id_lex Parametros: param
		{: RESULT= as.insCall(id_lex, param); :};
	I::= B: b
		{: RESULT= as.insBloque(b); :};
	B::= LLAAB Programa: p LLACE
		{: RESULT= as.bloque(p); :};
	E0::= E1: e1 MAS E0: e0
		{: RESULT= as.suma(e1, e0); :};
	E0::= E1: e1_0 MENOS E1:e1_1
		{: RESULT= as.resta(e1_0, e1_1); :};
	E0::= E1: e1
		{: RESULT=e1; :};
	E1::= E1: e1 AND E2: e2
		{: RESULT= as.and(e1, e2); :};
	E1::= E1: e1 OR E2: e2
		{: RESULT= as.or(e1, e2); :};
	E1::= E2: e2
		{: RESULT=e2; :};
	E2::= E2: e2 MENOR E3: e3
		{: RESULT= as.menor(e2, e3); :};
	E2::= E2: e2 MAYOR E3: e3
		{: RESULT= as.mayor(e2, e3); :};
	E2::= E2: e2 MENORIGUAL E3: e3
		{: RESULT= as.menorIgual(e2, e3); :};
	E2::= E2: e2 MAYORIGUAL E3: e3
		{: RESULT= as.mayorIgual(e2, e3); :};
	E2::= E2: e2 EQUIV E3: e3
		{: RESULT= as.equiv(e2, e3); :};
	E2::= E2: e2 NONEQUIV E3: e3
		{: RESULT= as.nonEquiv(e2, e3); :};
	E2::= E3: e3
		{: RESULT=e3; :};
	E3::= E4: e4_0 MULT E4: e4_1
		{: RESULT= as.mult(e4_0, e4_1); :};
	E3::= E4: e4_0 DIV E4: e4_1
		{: RESULT= as.div(e4_0, e4_1); :};
	E3::= E4: e4_0 RESTO E4: e4_1
		{: RESULT= as.resto(e4_0, e4_1); :};
	E3::= E4: e4
		{: RESULT=e4; :};
	E4::= NOT E4: e4
		{: RESULT= as.not(e4); :};
	E4::= MENOS E5: e5
		{: RESULT= as.neg(e5); :};
	E4::= E5: e5
		{: RESULT=e5; :};
	E5::= CORAB E0: e0 CORCE
		{: RESULT= as.index(e0); :};
	E5::= PUNTO IDEN: id_lex
		{: RESULT= as.access(id_lex); :};
	E5::= FLECHA IDEN: id_lex
		{: RESULT= as.access(id_lex); :};
	E5::= E6: e6
		{: RESULT=e6; :};
	E6::= MULT E6: e6
		{: RESULT= as.indirect(e6); :};
	E6::= E7: e7
		{: RESULT=e7; :};
	E7::= NUMINT: int_lex
		{: RESULT= as.numInt(int_lex); :};
	E7::= NUMREAL: real_lex
		{: RESULT= as.numReal(real_lex); :};
	E7::= TRUE
		{: RESULT= as.ttrue(); :};
	E7::= FALSE
		{: RESULT= as.ffalse(); :};
	E7::= CADENA: cad_lex
		{: RESULT= as.cadena(cad_lex); :};
	E7::= IDEN: id_lex
		{: RESULT= as.iden(id_lex); :};
	E7::= NULL
		{: RESULT= as.nulo(); :};
