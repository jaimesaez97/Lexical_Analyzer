
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed May 20 10:01:44 CEST 2020
//----------------------------------------------------

package astconstructor;

import java_cup.runtime.*;
import lex.ProyectLexicalAnalyzer;
import lex.LexicalClass;
import lex.LexicalUnit;
import err.ProyectErrorMgmt;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed May 20 10:01:44 CEST 2020
  */
public class ProyectSyntaxAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ProyectSyntaxAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public ProyectSyntaxAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ProyectSyntaxAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\003\003\000\002\003\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\006\000\002\005\005\000" +
    "\002\006\005\000\002\006\007\000\002\006\004\000\002" +
    "\006\006\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\010" +
    "\000\002\007\006\000\002\007\004\000\002\010\004\000" +
    "\002\010\006\000\002\011\003\000\002\011\005\000\002" +
    "\012\005\000\002\012\007\000\002\012\011\000\002\012" +
    "\007\000\002\012\004\000\002\012\004\000\002\012\003" +
    "\000\002\012\004\000\002\012\004\000\002\012\005\000" +
    "\002\012\003\000\002\013\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\003\000\002\020" +
    "\004\000\002\020\004\000\002\020\003\000\002\021\005" +
    "\000\002\021\004\000\002\021\004\000\002\021\003\000" +
    "\002\022\004\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\064\006\004\011\007\012\006\014\011\021" +
    "\013\025\014\030\015\035\016\036\017\040\020\041\021" +
    "\042\022\044\024\047\025\050\026\054\027\055\030\056" +
    "\031\057\032\060\033\063\035\065\036\070\041\071\050" +
    "\073\047\001\002\000\022\006\004\035\016\040\020\042" +
    "\022\044\024\057\032\063\035\070\041\001\002\000\016" +
    "\002\uffea\013\uffea\031\uffea\034\214\051\uffea\053\uffea\001" +
    "\002\000\034\006\004\014\011\035\016\040\020\041\021" +
    "\042\022\044\024\047\025\050\026\054\027\057\032\063" +
    "\035\070\041\001\002\000\034\006\004\014\011\035\016" +
    "\040\020\041\021\042\022\044\024\047\025\050\026\054" +
    "\027\057\032\063\035\070\041\001\002\000\006\034\210" +
    "\064\ufffe\001\002\000\034\006\004\014\011\035\016\040" +
    "\020\041\021\042\022\044\024\047\025\050\026\054\027" +
    "\057\032\063\035\070\041\001\002\000\016\002\uffde\013" +
    "\uffde\031\uffde\034\uffde\051\uffde\053\uffde\001\002\000\022" +
    "\007\101\010\103\020\106\024\102\045\111\057\104\066" +
    "\107\067\110\001\002\000\004\057\203\001\002\000\034" +
    "\006\004\014\011\035\016\040\020\041\021\042\022\044" +
    "\024\047\025\050\026\054\027\057\032\063\035\070\041" +
    "\001\002\000\060\002\uffc0\004\uffc0\005\uffc0\006\uffc0\013" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\022\uffc0\023\uffc0\027\uffc0" +
    "\031\uffc0\033\uffc0\034\uffc0\041\uffc0\043\uffc0\046\uffc0\051" +
    "\uffc0\053\uffc0\061\uffc0\062\uffc0\074\uffc0\075\uffc0\001\002" +
    "\000\034\006\004\014\011\035\016\040\020\041\021\042" +
    "\022\044\024\047\025\050\026\054\027\057\032\063\035" +
    "\070\041\001\002\000\060\002\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe\022\uffbe\023\uffbe" +
    "\027\uffbe\031\uffbe\033\uffbe\034\uffbe\041\uffbe\043\uffbe\046" +
    "\uffbe\051\uffbe\053\uffbe\061\uffbe\062\uffbe\074\uffbe\075\uffbe" +
    "\001\002\000\030\006\004\035\016\040\020\042\022\044" +
    "\024\047\025\050\026\054\027\057\032\063\035\070\041" +
    "\001\002\000\060\002\uffbc\004\uffbc\005\uffbc\006\uffbc\013" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\022\uffbc\023\uffbc\027\uffbc" +
    "\031\uffbc\033\uffbc\034\uffbc\041\uffbc\043\uffbc\046\uffbc\051" +
    "\uffbc\053\uffbc\061\uffbc\062\uffbc\074\uffbc\075\uffbc\001\002" +
    "\000\004\002\171\001\002\000\060\002\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1\022\uffc1" +
    "\023\uffc1\027\uffc1\031\uffc1\033\uffc1\034\uffc1\041\uffc1\043" +
    "\uffc1\046\uffc1\051\uffc1\053\uffc1\061\uffc1\062\uffc1\074\uffc1" +
    "\075\uffc1\001\002\000\004\057\170\001\002\000\034\006" +
    "\004\014\011\035\016\040\020\041\021\042\022\044\024" +
    "\047\025\050\026\054\027\057\032\063\035\070\041\001" +
    "\002\000\004\057\165\001\002\000\016\002\uffe2\013\uffe2" +
    "\031\uffe2\034\uffe2\051\uffe2\053\uffe2\001\002\000\034\006" +
    "\004\014\011\035\016\040\020\041\021\042\022\044\024" +
    "\047\025\050\026\054\027\057\032\063\035\070\041\001" +
    "\002\000\060\002\uffbd\004\uffbd\005\uffbd\006\uffbd\013\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\022\uffbd\023\uffbd\027\uffbd\031" +
    "\uffbd\033\uffbd\034\uffbd\041\uffbd\043\uffbd\046\uffbd\051\uffbd" +
    "\053\uffbd\061\uffbd\062\uffbd\074\uffbd\075\uffbd\001\002\000" +
    "\034\006\004\014\011\035\016\040\020\041\021\042\022" +
    "\044\024\047\025\050\026\054\027\057\032\063\035\070" +
    "\041\001\002\000\006\002\001\013\001\001\002\000\060" +
    "\002\uffc2\004\uffc2\005\uffc2\006\uffc2\013\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\022\uffc2\023\uffc2\027\uffc2\031\uffc2\033\uffc2" +
    "\034\uffc2\041\uffc2\043\uffc2\046\uffc2\051\uffc2\053\uffc2\061" +
    "\uffc2\062\uffc2\074\uffc2\075\uffc2\001\002\000\004\057\142" +
    "\001\002\000\004\064\140\001\002\000\060\002\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\022\uffc3\023\uffc3\027\uffc3\031\uffc3\033\uffc3\034\uffc3\041" +
    "\uffc3\043\uffc3\046\uffc3\051\uffc3\053\uffc3\061\uffc3\062\uffc3" +
    "\074\uffc3\075\uffc3\001\002\000\060\002\uffbf\004\uffbf\005" +
    "\uffbf\006\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\022\uffbf" +
    "\023\uffbf\027\uffbf\031\uffbf\033\uffbf\034\uffbf\041\uffbf\043" +
    "\uffbf\046\uffbf\051\uffbf\053\uffbf\061\uffbf\062\uffbf\074\uffbf" +
    "\075\uffbf\001\002\000\060\002\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\013\uffc5\015\uffc5\016\uffc5\017\uffc5\022\uffc5\023\uffc5" +
    "\027\uffc5\031\uffc5\033\uffc5\034\uffc5\041\uffc5\043\uffc5\046" +
    "\uffc5\051\uffc5\053\uffc5\061\uffc5\062\uffc5\074\uffc5\075\uffc5" +
    "\001\002\000\060\002\uffc9\004\uffc9\005\uffc9\006\uffc9\013" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\022\uffc9\023\uffc9\027\uffc9" +
    "\031\uffc9\033\uffc9\034\uffc9\041\uffc9\043\uffc9\046\uffc9\051" +
    "\uffc9\053\uffc9\061\uffc9\062\uffc9\074\uffc9\075\uffc9\001\002" +
    "\000\060\002\uffcc\004\uffcc\005\134\006\132\013\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\022\uffcc\023\uffcc\027\133\031\uffcc" +
    "\033\uffcc\034\uffcc\041\uffcc\043\uffcc\046\uffcc\051\uffcc\053" +
    "\uffcc\061\uffcc\062\uffcc\074\uffcc\075\uffcc\001\002\000\052" +
    "\002\uffd0\004\uffd0\013\uffd0\015\uffd0\016\uffd0\017\uffd0\022" +
    "\uffd0\023\uffd0\031\uffd0\033\uffd0\034\uffd0\041\uffd0\043\uffd0" +
    "\046\uffd0\051\uffd0\053\uffd0\061\uffd0\062\uffd0\074\uffd0\075" +
    "\uffd0\001\002\000\052\002\uffd7\004\uffd7\013\uffd7\015\063" +
    "\016\uffd7\017\uffd7\022\uffd7\023\067\031\uffd7\033\064\034" +
    "\uffd7\041\uffd7\043\065\046\066\051\uffd7\053\uffd7\061\062" +
    "\062\uffd7\074\uffd7\075\uffd7\001\002\000\064\006\004\011" +
    "\007\012\006\014\011\021\013\025\014\030\015\035\016" +
    "\036\017\040\020\041\021\042\022\044\024\047\025\050" +
    "\026\054\027\055\030\056\031\057\032\060\033\063\035" +
    "\065\036\070\041\071\050\073\047\001\002\000\022\007" +
    "\101\010\103\020\106\024\102\045\111\057\104\066\107" +
    "\067\110\001\002\000\036\002\uffda\004\uffda\013\uffda\016" +
    "\056\017\uffda\022\060\031\uffda\034\uffda\041\057\051\uffda" +
    "\053\uffda\062\uffda\074\uffda\075\055\001\002\000\004\017" +
    "\053\001\002\000\034\006\004\014\011\035\016\040\020" +
    "\041\021\042\022\044\024\047\025\050\026\054\027\057" +
    "\032\063\035\070\041\001\002\000\016\002\uffe8\013\uffe8" +
    "\031\uffe8\034\uffe8\051\uffe8\053\uffe8\001\002\000\034\006" +
    "\004\014\011\035\016\040\020\041\021\042\022\044\024" +
    "\047\025\050\026\054\027\057\032\063\035\070\041\001" +
    "\002\000\034\006\004\014\011\035\016\040\020\041\021" +
    "\042\022\044\024\047\025\050\026\054\027\057\032\063" +
    "\035\070\041\001\002\000\034\006\004\014\011\035\016" +
    "\040\020\041\021\042\022\044\024\047\025\050\026\054" +
    "\027\057\032\063\035\070\041\001\002\000\034\006\004" +
    "\014\011\035\016\040\020\041\021\042\022\044\024\047" +
    "\025\050\026\054\027\057\032\063\035\070\041\001\002" +
    "\000\052\002\uffd8\004\uffd8\013\uffd8\015\063\016\uffd8\017" +
    "\uffd8\022\uffd8\023\067\031\uffd8\033\064\034\uffd8\041\uffd8" +
    "\043\065\046\066\051\uffd8\053\uffd8\061\062\062\uffd8\074" +
    "\uffd8\075\uffd8\001\002\000\034\006\004\014\011\035\016" +
    "\040\020\041\021\042\022\044\024\047\025\050\026\054" +
    "\027\057\032\063\035\070\041\001\002\000\034\006\004" +
    "\014\011\035\016\040\020\041\021\042\022\044\024\047" +
    "\025\050\026\054\027\057\032\063\035\070\041\001\002" +
    "\000\034\006\004\014\011\035\016\040\020\041\021\042" +
    "\022\044\024\047\025\050\026\054\027\057\032\063\035" +
    "\070\041\001\002\000\034\006\004\014\011\035\016\040" +
    "\020\041\021\042\022\044\024\047\025\050\026\054\027" +
    "\057\032\063\035\070\041\001\002\000\034\006\004\014" +
    "\011\035\016\040\020\041\021\042\022\044\024\047\025" +
    "\050\026\054\027\057\032\063\035\070\041\001\002\000" +
    "\034\006\004\014\011\035\016\040\020\041\021\042\022" +
    "\044\024\047\025\050\026\054\027\057\032\063\035\070" +
    "\041\001\002\000\052\002\uffd1\004\uffd1\013\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\022\uffd1\023\uffd1\031\uffd1\033\uffd1\034" +
    "\uffd1\041\uffd1\043\uffd1\046\uffd1\051\uffd1\053\uffd1\061\uffd1" +
    "\062\uffd1\074\uffd1\075\uffd1\001\002\000\052\002\uffd5\004" +
    "\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5" +
    "\031\uffd5\033\uffd5\034\uffd5\041\uffd5\043\uffd5\046\uffd5\051" +
    "\uffd5\053\uffd5\061\uffd5\062\uffd5\074\uffd5\075\uffd5\001\002" +
    "\000\052\002\uffd6\004\uffd6\013\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\022\uffd6\023\uffd6\031\uffd6\033\uffd6\034\uffd6\041\uffd6" +
    "\043\uffd6\046\uffd6\051\uffd6\053\uffd6\061\uffd6\062\uffd6\074" +
    "\uffd6\075\uffd6\001\002\000\052\002\uffd3\004\uffd3\013\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\022\uffd3\023\uffd3\031\uffd3\033" +
    "\uffd3\034\uffd3\041\uffd3\043\uffd3\046\uffd3\051\uffd3\053\uffd3" +
    "\061\uffd3\062\uffd3\074\uffd3\075\uffd3\001\002\000\052\002" +
    "\uffd4\004\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4" +
    "\023\uffd4\031\uffd4\033\uffd4\034\uffd4\041\uffd4\043\uffd4\046" +
    "\uffd4\051\uffd4\053\uffd4\061\uffd4\062\uffd4\074\uffd4\075\uffd4" +
    "\001\002\000\052\002\uffd2\004\uffd2\013\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\022\uffd2\023\uffd2\031\uffd2\033\uffd2\034\uffd2" +
    "\041\uffd2\043\uffd2\046\uffd2\051\uffd2\053\uffd2\061\uffd2\062" +
    "\uffd2\074\uffd2\075\uffd2\001\002\000\032\002\uffdb\004\uffdb" +
    "\013\uffdb\016\056\017\uffdb\022\060\031\uffdb\034\uffdb\051" +
    "\uffdb\053\uffdb\062\uffdb\074\uffdb\001\002\000\052\002\uffd9" +
    "\004\uffd9\013\uffd9\015\063\016\uffd9\017\uffd9\022\uffd9\023" +
    "\067\031\uffd9\033\064\034\uffd9\041\uffd9\043\065\046\066" +
    "\051\uffd9\053\uffd9\061\062\062\uffd9\074\uffd9\075\uffd9\001" +
    "\002\000\026\002\uffdc\004\uffdc\013\uffdc\017\uffdc\031\uffdc" +
    "\034\uffdc\051\uffdc\053\uffdc\062\uffdc\074\uffdc\001\002\000" +
    "\006\057\ufff4\072\ufff4\001\002\000\006\057\ufff2\072\ufff2" +
    "\001\002\000\004\050\123\001\002\000\006\057\ufff0\072" +
    "\ufff0\001\002\000\004\057\122\001\002\000\004\073\113" +
    "\001\002\000\006\057\ufff1\072\ufff1\001\002\000\022\007" +
    "\101\010\103\020\106\024\102\045\111\057\104\066\107" +
    "\067\110\001\002\000\006\057\ufff3\072\ufff3\001\002\000" +
    "\006\057\uffed\072\uffed\001\002\000\022\007\101\010\103" +
    "\020\106\024\102\045\111\057\104\066\107\067\110\001" +
    "\002\000\004\057\117\001\002\000\004\013\116\001\002" +
    "\000\006\057\uffee\072\uffee\001\002\000\006\013\uffec\034" +
    "\120\001\002\000\022\007\101\010\103\020\106\024\102" +
    "\045\111\057\104\066\107\067\110\001\002\000\004\013" +
    "\uffeb\001\002\000\006\034\ufffc\064\ufffc\001\002\000\004" +
    "\063\124\001\002\000\004\004\125\001\002\000\004\032" +
    "\126\001\002\000\022\007\101\010\103\020\106\024\102" +
    "\045\111\057\104\066\107\067\110\001\002\000\006\057" +
    "\uffef\072\uffef\001\002\000\004\013\131\001\002\000\020" +
    "\002\uffdd\013\uffdd\031\uffdd\034\uffdd\051\uffdd\053\uffdd\064" +
    "\uffdd\001\002\000\034\006\004\014\011\035\016\040\020" +
    "\041\021\042\022\044\024\047\025\050\026\054\027\057" +
    "\032\063\035\070\041\001\002\000\034\006\004\014\011" +
    "\035\016\040\020\041\021\042\022\044\024\047\025\050" +
    "\026\054\027\057\032\063\035\070\041\001\002\000\034" +
    "\006\004\014\011\035\016\040\020\041\021\042\022\044" +
    "\024\047\025\050\026\054\027\057\032\063\035\070\041" +
    "\001\002\000\052\002\uffcd\004\uffcd\013\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\022\uffcd\023\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\041\uffcd\043\uffcd\046\uffcd\051\uffcd\053\uffcd\061\uffcd\062" +
    "\uffcd\074\uffcd\075\uffcd\001\002\000\052\002\uffce\004\uffce" +
    "\013\uffce\015\uffce\016\uffce\017\uffce\022\uffce\023\uffce\031" +
    "\uffce\033\uffce\034\uffce\041\uffce\043\uffce\046\uffce\051\uffce" +
    "\053\uffce\061\uffce\062\uffce\074\uffce\075\uffce\001\002\000" +
    "\052\002\uffcf\004\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\022\uffcf\023\uffcf\031\uffcf\033\uffcf\034\uffcf\041\uffcf\043" +
    "\uffcf\046\uffcf\051\uffcf\053\uffcf\061\uffcf\062\uffcf\074\uffcf" +
    "\075\uffcf\001\002\000\056\006\004\011\007\012\006\014" +
    "\011\025\014\030\015\035\016\036\017\040\020\041\021" +
    "\042\022\044\024\047\025\050\026\054\027\055\030\056" +
    "\031\057\032\060\033\063\035\070\041\073\047\001\002" +
    "\000\006\002\uffff\013\uffff\001\002\000\004\026\143\001" +
    "\002\000\022\007\101\010\103\020\106\024\102\045\111" +
    "\057\104\066\107\067\110\001\002\000\004\073\047\001" +
    "\002\000\006\034\ufffa\064\ufffa\001\002\000\004\052\157" +
    "\001\002\000\006\057\150\072\151\001\002\000\006\037" +
    "\155\052\ufff6\001\002\000\004\057\152\001\002\000\006" +
    "\037\153\052\ufff8\001\002\000\022\007\101\010\103\020" +
    "\106\024\102\045\111\057\104\066\107\067\110\001\002" +
    "\000\004\052\ufff7\001\002\000\022\007\101\010\103\020" +
    "\106\024\102\045\111\057\104\066\107\067\110\001\002" +
    "\000\004\052\ufff5\001\002\000\020\002\ufff9\013\ufff9\031" +
    "\ufff9\034\ufff9\051\ufff9\053\ufff9\073\ufff9\001\002\000\004" +
    "\074\161\001\002\000\056\006\004\011\007\012\006\014" +
    "\011\025\014\030\015\035\016\036\017\040\020\041\021" +
    "\042\022\044\024\047\025\050\026\054\027\055\030\056" +
    "\031\057\032\060\033\063\035\070\041\073\047\001\002" +
    "\000\004\031\163\001\002\000\016\002\uffe5\013\uffe5\031" +
    "\uffe5\034\uffe5\051\uffe5\053\uffe5\001\002\000\016\002\uffe4" +
    "\013\uffe4\031\uffe4\034\uffe4\051\uffe4\053\uffe4\001\002\000" +
    "\060\002\uffc7\004\uffc7\005\uffc7\006\uffc7\013\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\022\uffc7\023\uffc7\027\uffc7\031\uffc7\033" +
    "\uffc7\034\uffc7\041\uffc7\043\uffc7\046\uffc7\051\uffc7\053\uffc7" +
    "\061\uffc7\062\uffc7\074\uffc7\075\uffc7\001\002\000\004\004" +
    "\167\001\002\000\060\002\uffc8\004\uffc8\005\uffc8\006\uffc8" +
    "\013\uffc8\015\uffc8\016\uffc8\017\uffc8\022\uffc8\023\uffc8\027" +
    "\uffc8\031\uffc8\033\uffc8\034\uffc8\041\uffc8\043\uffc8\046\uffc8" +
    "\051\uffc8\053\uffc8\061\uffc8\062\uffc8\074\uffc8\075\uffc8\001" +
    "\002\000\060\002\uffc6\004\uffc6\005\uffc6\006\uffc6\013\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\022\uffc6\023\uffc6\027\uffc6\031" +
    "\uffc6\033\uffc6\034\uffc6\041\uffc6\043\uffc6\046\uffc6\051\uffc6" +
    "\053\uffc6\061\uffc6\062\uffc6\074\uffc6\075\uffc6\001\002\000" +
    "\004\002\000\001\002\000\060\002\uffca\004\uffca\005\uffca" +
    "\006\uffca\013\uffca\015\uffca\016\uffca\017\uffca\022\uffca\023" +
    "\uffca\027\uffca\031\uffca\033\uffca\034\uffca\041\uffca\043\uffca" +
    "\046\uffca\051\uffca\053\uffca\061\uffca\062\uffca\074\uffca\075" +
    "\uffca\001\002\000\016\002\uffe1\013\uffe1\031\uffe1\034\uffe1" +
    "\051\uffe1\053\uffe1\001\002\000\004\062\175\001\002\000" +
    "\056\006\004\011\007\012\006\014\011\025\014\030\015" +
    "\035\016\036\017\040\020\041\021\042\022\044\024\047" +
    "\025\050\026\054\027\055\030\056\031\057\032\060\033" +
    "\063\035\070\041\073\047\001\002\000\006\051\200\053" +
    "\177\001\002\000\056\006\004\011\007\012\006\014\011" +
    "\025\014\030\015\035\016\036\017\040\020\041\021\042" +
    "\022\044\024\047\025\050\026\054\027\055\030\056\031" +
    "\057\032\060\033\063\035\070\041\073\047\001\002\000" +
    "\016\002\uffe7\013\uffe7\031\uffe7\034\uffe7\051\uffe7\053\uffe7" +
    "\001\002\000\004\051\202\001\002\000\016\002\uffe6\013" +
    "\uffe6\031\uffe6\034\uffe6\051\uffe6\053\uffe6\001\002\000\004" +
    "\026\143\001\002\000\016\002\uffdf\013\uffdf\031\uffdf\034" +
    "\uffdf\051\uffdf\053\uffdf\001\002\000\004\057\206\001\002" +
    "\000\006\034\ufffb\064\ufffb\001\002\000\060\002\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\022\uffcb\023\uffcb\027\uffcb\031\uffcb\033\uffcb\034\uffcb\041" +
    "\uffcb\043\uffcb\046\uffcb\051\uffcb\053\uffcb\061\uffcb\062\uffcb" +
    "\074\uffcb\075\uffcb\001\002\000\010\021\013\065\036\071" +
    "\050\001\002\000\004\064\ufffd\001\002\000\016\002\uffe3" +
    "\013\uffe3\031\uffe3\034\uffe3\051\uffe3\053\uffe3\001\002\000" +
    "\016\002\uffe0\013\uffe0\031\uffe0\034\uffe0\051\uffe0\053\uffe0" +
    "\001\002\000\056\006\004\011\007\012\006\014\011\025" +
    "\014\030\015\035\016\036\017\040\020\041\021\042\022" +
    "\044\024\047\025\050\026\054\027\055\030\056\031\057" +
    "\032\060\033\063\035\070\041\073\047\001\002\000\014" +
    "\002\uffe9\013\uffe9\031\uffe9\051\uffe9\053\uffe9\001\002\000" +
    "\060\002\uffc4\004\uffc4\005\uffc4\006\uffc4\013\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\022\uffc4\023\uffc4\027\uffc4\031\uffc4\033" +
    "\uffc4\034\uffc4\041\uffc4\043\uffc4\046\uffc4\051\uffc4\053\uffc4" +
    "\061\uffc4\062\uffc4\074\uffc4\075\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\036\002\022\003\036\004\007\011\033\012" +
    "\004\013\011\014\051\015\050\016\045\017\044\020\043" +
    "\021\042\022\041\023\037\001\001\000\006\022\215\023" +
    "\037\001\001\000\002\001\001\000\022\014\212\015\050" +
    "\016\045\017\044\020\043\021\042\022\041\023\037\001" +
    "\001\000\022\014\211\015\050\016\045\017\044\020\043" +
    "\021\042\022\041\023\037\001\001\000\002\001\001\000" +
    "\012\020\206\021\042\022\041\023\037\001\001\000\002" +
    "\001\001\000\004\007\204\001\001\000\002\001\001\000" +
    "\022\014\173\015\050\016\045\017\044\020\043\021\042" +
    "\022\041\023\037\001\001\000\002\001\001\000\022\014" +
    "\172\015\050\016\045\017\044\020\043\021\042\022\041" +
    "\023\037\001\001\000\002\001\001\000\010\021\171\022" +
    "\041\023\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\165\015" +
    "\050\016\045\017\044\020\043\021\042\022\041\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\163\015\050\016\045\017\044\020\043\021\042\022\041" +
    "\023\037\001\001\000\002\001\001\000\022\014\157\015" +
    "\050\016\045\017\044\020\043\021\042\022\041\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\002\127\003\036" +
    "\004\007\011\033\012\004\013\011\014\051\015\050\016" +
    "\045\017\044\020\043\021\042\022\041\023\037\001\001" +
    "\000\004\007\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\053\015\050\016\045\017\044\020\043" +
    "\021\042\022\041\023\037\001\001\000\002\001\001\000" +
    "\022\014\077\015\050\016\045\017\044\020\043\021\042" +
    "\022\041\023\037\001\001\000\016\016\076\017\044\020" +
    "\043\021\042\022\041\023\037\001\001\000\020\015\075" +
    "\016\045\017\044\020\043\021\042\022\041\023\037\001" +
    "\001\000\016\016\060\017\044\020\043\021\042\022\041" +
    "\023\037\001\001\000\002\001\001\000\014\017\074\020" +
    "\043\021\042\022\041\023\037\001\001\000\014\017\073" +
    "\020\043\021\042\022\041\023\037\001\001\000\014\017" +
    "\072\020\043\021\042\022\041\023\037\001\001\000\014" +
    "\017\071\020\043\021\042\022\041\023\037\001\001\000" +
    "\014\017\070\020\043\021\042\022\041\023\037\001\001" +
    "\000\014\017\067\020\043\021\042\022\041\023\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\113\010\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\113\010\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\136\021\042\022" +
    "\041\023\037\001\001\000\012\020\135\021\042\022\041" +
    "\023\037\001\001\000\012\020\134\021\042\022\041\023" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\140\012\004\013\011\014\051\015" +
    "\050\016\045\017\044\020\043\021\042\022\041\023\037" +
    "\001\001\000\002\001\001\000\004\005\143\001\001\000" +
    "\006\006\145\007\146\001\001\000\004\013\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\153\007\146\001\001\000\002\001\001\000\006\006" +
    "\155\007\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\161\012\004\013\011\014" +
    "\051\015\050\016\045\017\044\020\043\021\042\022\041" +
    "\023\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\011\175" +
    "\012\004\013\011\014\051\015\050\016\045\017\044\020" +
    "\043\021\042\022\041\023\037\001\001\000\002\001\001" +
    "\000\030\011\200\012\004\013\011\014\051\015\050\016" +
    "\045\017\044\020\043\021\042\022\041\023\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\210\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\214\012\004\013\011\014\051\015" +
    "\050\016\045\017\044\020\043\021\042\022\041\023\037" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ProyectSyntaxAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ProyectSyntaxAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ProyectSyntaxAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	error = new ProyectErrorMgmt();
	ProyectLexicalAnalyzer lex = (ProyectLexicalAnalyzer)getScanner();
	lex.setErrorMgmt(error);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	private ProyectErrorMgmt error;
	public void syntax_error(Symbol lexicalUnit){
		error.syntaxError((LexicalUnit) lexicalUnit);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ProyectSyntaxAnalyzer$actions {


	private ASProyect as = new ASProyect();

  private final ProyectSyntaxAnalyzer parser;

  /** Constructor */
  CUP$ProyectSyntaxAnalyzer$actions(ProyectSyntaxAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ProyectSyntaxAnalyzer$do_action_part00000000(
    int                        CUP$ProyectSyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$ProyectSyntaxAnalyzer$parser,
    java.util.Stack            CUP$ProyectSyntaxAnalyzer$stack,
    int                        CUP$ProyectSyntaxAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ProyectSyntaxAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$ProyectSyntaxAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Si 
            {
              Programa RESULT =null;
		Instrucciones si = (Instrucciones)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.progIns(si); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ProyectSyntaxAnalyzer$parser.done_parsing();
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Sd END Si 
            {
              Programa RESULT =null;
		Declaraciones sd = (Declaraciones)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Instrucciones si = (Instrucciones)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.decIns(si, sd); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sd ::= D 
            {
              Declaraciones RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.dSimple(dec); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sd",1, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sd ::= D PYCOMA Sd 
            {
              Declaraciones RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Declaraciones sd = (Declaraciones)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.dCompuesta(sd, dec); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sd",1, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= VAR T IDEN 
            {
              Declaracion RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.decVar(tipo, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("D",2, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // D ::= TYPE T IDEN 
            {
              Declaracion RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.decTipo(tipo, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("D",2, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // D ::= PROC IDEN Parametros B 
            {
              Declaracion RESULT =null;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Parametros param = (Parametros)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		B bloque = (B)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.decProc(id_lex, param, bloque); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("D",2, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Parametros ::= PARAB Sp PARCE 
            {
              Parametros RESULT =null;
		Sp sp = (Sp)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.secParam(sp); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Parametros",3, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sp ::= T UMPERSAND IDEN 
            {
              Sp RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.parSimple(t, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sp",4, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sp ::= T UMPERSAND IDEN COMA Sp 
            {
              Sp RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-4)).value;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Sp sp = (Sp)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.parCompuesta(t, id_lex, sp); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sp",4, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sp ::= T IDEN 
            {
              Sp RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.parSimple(t, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sp",4, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sp ::= T IDEN COMA Sp 
            {
              Sp RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Sp sp = (Sp)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.parCompuesta(t, id_lex, sp); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sp",4, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // T ::= INT 
            {
              T RESULT =null;
		 RESULT= as.tInt(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",5, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // T ::= REAL 
            {
              T RESULT =null;
		 RESULT= as.tReal(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",5, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // T ::= BOOL 
            {
              T RESULT =null;
		 RESULT= as.tBool(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",5, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // T ::= STRING 
            {
              T RESULT =null;
		 RESULT= as.tString(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",5, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // T ::= IDEN 
            {
              T RESULT =null;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.tIden(id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",5, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // T ::= ARRAY CORAB NUMINT CORCE OF T 
            {
              T RESULT =null;
		String tam = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.tArray(tam, tipo); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",5, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // T ::= RECORD LLAAB Sc LLACE 
            {
              T RESULT =null;
		Sc sc = (Sc)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.tRecord(sc); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",5, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T ::= POINTER T 
            {
              T RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.tPointer(tipo); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",5, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sc ::= T IDEN 
            {
              Sc RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.campoSimple(t, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sc",6, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sc ::= T IDEN PYCOMA Sc 
            {
              Sc RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Sc sc = (Sc)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.campoCompuesto(t, id_lex, sc); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sc",6, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Si ::= I 
            {
              Instrucciones RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.iSimple(ins); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Si",7, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Si ::= I PYCOMA Si 
            {
              Instrucciones RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Instrucciones si = (Instrucciones)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.iCompuesta(si, ins); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Si",7, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // I ::= E0 IGUAL E0 
            {
              Instruccion RESULT =null;
		E e0_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e0_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insAsig(e0_0, e0_1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // I ::= IF E0 THEN Si ENDIF 
            {
              Instruccion RESULT =null;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		Instrucciones si = (Instrucciones)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.insIf(e0, si); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // I ::= IF E0 THEN Si ELSE Si ENDIF 
            {
              Instruccion RESULT =null;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-5)).value;
		Instrucciones si0 = (Instrucciones)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		Instrucciones si1 = (Instrucciones)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.insIfElse(e0, si0, si1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // I ::= WHILE E0 DO Si ENDWHILE 
            {
              Instruccion RESULT =null;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		Instrucciones si = (Instrucciones)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.insWhile(e0, si); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // I ::= READ E0 
            {
              Instruccion RESULT =null;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insRead(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // I ::= WRITE E0 
            {
              Instruccion RESULT =null;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insWrite(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // I ::= NL 
            {
              Instruccion RESULT =null;
		 RESULT= as.insNl(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // I ::= NEW E0 
            {
              Instruccion RESULT =null;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insNew(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // I ::= DELETE E0 
            {
              Instruccion RESULT =null;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insDelete(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // I ::= CALL IDEN Parametros 
            {
              Instruccion RESULT =null;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		Parametros param = (Parametros)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insCall(id_lex, param); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // I ::= B 
            {
              Instruccion RESULT =null;
		B b = (B)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insBloque(b); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",8, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // B ::= LLAAB Programa LLACE 
            {
              B RESULT =null;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.bloque(p); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("B",9, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E0 ::= E1 MAS E0 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.suma(e1, e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",10, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E0 ::= E1 MENOS E1 
            {
              E RESULT =null;
		E e1_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e1_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.resta(e1_0, e1_1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",10, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E0 ::= E1 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e1; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",10, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E1 ::= E1 AND E2 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.and(e1, e2); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",11, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E1 ::= E1 OR E2 
            {
              E RESULT =null;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.or(e1, e2); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",11, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E1 ::= E2 
            {
              E RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e2; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",11, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E2 ::= E2 MENOR E3 
            {
              E RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.menor(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",12, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E2 ::= E2 MAYOR E3 
            {
              E RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.mayor(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",12, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E2 ::= E2 MENORIGUAL E3 
            {
              E RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.menorIgual(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",12, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E2 ::= E2 MAYORIGUAL E3 
            {
              E RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.mayorIgual(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",12, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E2 ::= E2 EQUIV E3 
            {
              E RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.equiv(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",12, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E2 ::= E2 NONEQUIV E3 
            {
              E RESULT =null;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.nonEquiv(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",12, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E2 ::= E3 
            {
              E RESULT =null;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e3; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",12, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E3 ::= E4 MULT E4 
            {
              E RESULT =null;
		E e4_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e4_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.mult(e4_0, e4_1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",13, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E3 ::= E4 DIV E4 
            {
              E RESULT =null;
		E e4_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e4_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.div(e4_0, e4_1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",13, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E3 ::= E4 RESTO E4 
            {
              E RESULT =null;
		E e4_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		E e4_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.resto(e4_0, e4_1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",13, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E3 ::= E4 
            {
              E RESULT =null;
		E e4 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e4; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",13, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E4 ::= NOT E4 
            {
              E RESULT =null;
		E e4 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.not(e4); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",14, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= MENOS E5 
            {
              E RESULT =null;
		E e5 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.neg(e5); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",14, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= E5 
            {
              E RESULT =null;
		E e5 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e5; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",14, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E5 ::= CORAB E0 CORCE 
            {
              E RESULT =null;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.index(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",15, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= PUNTO IDEN 
            {
              E RESULT =null;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.access(id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",15, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= FLECHA IDEN 
            {
              E RESULT =null;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.access(id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",15, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= E6 
            {
              E RESULT =null;
		E e6 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e6; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",15, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E6 ::= MULT E6 
            {
              E RESULT =null;
		E e6 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.indirect(e6); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E6",16, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E6 ::= E7 
            {
              E RESULT =null;
		E e7 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e7; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E6",16, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E7 ::= NUMINT 
            {
              E RESULT =null;
		String int_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.numInt(int_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",17, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= NUMREAL 
            {
              E RESULT =null;
		String real_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.numReal(real_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",17, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= TRUE 
            {
              E RESULT =null;
		 RESULT= as.ttrue(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",17, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= FALSE 
            {
              E RESULT =null;
		 RESULT= as.ffalse(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",17, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= CADENA 
            {
              E RESULT =null;
		String cad_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.cadena(cad_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",17, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= IDEN 
            {
              E RESULT =null;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.iden(id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",17, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= NULL 
            {
              E RESULT =null;
		 RESULT= as.nulo(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",17, RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ProyectSyntaxAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ProyectSyntaxAnalyzer$do_action(
    int                        CUP$ProyectSyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$ProyectSyntaxAnalyzer$parser,
    java.util.Stack            CUP$ProyectSyntaxAnalyzer$stack,
    int                        CUP$ProyectSyntaxAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$ProyectSyntaxAnalyzer$do_action_part00000000(
                               CUP$ProyectSyntaxAnalyzer$act_num,
                               CUP$ProyectSyntaxAnalyzer$parser,
                               CUP$ProyectSyntaxAnalyzer$stack,
                               CUP$ProyectSyntaxAnalyzer$top);
    }
}

