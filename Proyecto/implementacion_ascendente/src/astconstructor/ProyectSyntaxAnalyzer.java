
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed May 13 13:42:27 CEST 2020
//----------------------------------------------------

package astconstructor;

import java_cup.runtime.*;
import lex.ProyectLexicalAnalyzer;
import lex.LexicalClass;
import lex.LexicalUnit;
import err.ProyectErrorMgmt;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed May 13 13:42:27 CEST 2020
  */
public class ProyectSyntaxAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ProyectSyntaxAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public ProyectSyntaxAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ProyectSyntaxAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\003\003\000\002\003\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\006\000\002\005\005\000" +
    "\002\006\003\000\002\006\005\000\002\007\005\000\002" +
    "\007\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\010" +
    "\000\002\010\006\000\002\010\004\000\002\011\003\000" +
    "\002\011\005\000\002\012\004\000\002\013\003\000\002" +
    "\013\005\000\002\014\005\000\002\014\007\000\002\014" +
    "\011\000\002\014\007\000\002\014\004\000\002\014\004" +
    "\000\002\014\003\000\002\014\004\000\002\014\004\000" +
    "\002\014\005\000\002\014\003\000\002\015\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\017" +
    "\005\000\002\017\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\003\000\002\022" +
    "\004\000\002\022\004\000\002\022\003\000\002\023\005" +
    "\000\002\023\004\000\002\023\004\000\002\023\003\000" +
    "\002\024\004\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\064\006\021\007\004\024\026\026\050\030" +
    "\027\031\025\037\032\043\012\044\022\045\016\046\041" +
    "\047\036\050\015\054\033\057\014\064\017\065\006\066" +
    "\031\067\007\070\030\071\047\072\013\073\035\074\024" +
    "\075\020\001\002\000\022\007\004\037\032\044\022\045" +
    "\016\046\041\073\035\074\024\075\020\001\002\000\016" +
    "\002\uffe9\022\212\027\uffe9\052\uffe9\053\uffe9\056\uffe9\001" +
    "\002\000\034\006\021\007\004\024\026\030\027\031\025" +
    "\037\032\043\012\044\022\045\016\046\041\073\035\074" +
    "\024\075\020\001\002\000\034\006\021\007\004\024\026" +
    "\030\027\031\025\037\032\043\012\044\022\045\016\046" +
    "\041\073\035\074\024\075\020\001\002\000\006\004\ufffe" +
    "\022\206\001\002\000\016\002\uffdd\022\uffdd\027\uffdd\052" +
    "\uffdd\053\uffdd\056\uffdd\001\002\000\034\006\021\007\004" +
    "\024\026\030\027\031\025\037\032\043\012\044\022\045" +
    "\016\046\041\073\035\074\024\075\020\001\002\000\022" +
    "\034\101\035\111\036\102\037\104\040\107\060\106\061" +
    "\103\063\110\001\002\000\004\037\201\001\002\000\034" +
    "\006\021\007\004\024\026\030\027\031\025\037\032\043" +
    "\012\044\022\045\016\046\041\073\035\074\024\075\020" +
    "\001\002\000\056\002\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\022\uffc0\023\uffc0\025\uffc0\027\uffc0\042\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\001\002\000\034" +
    "\006\021\007\004\024\026\030\027\031\025\037\032\043" +
    "\012\044\022\045\016\046\041\073\035\074\024\075\020" +
    "\001\002\000\056\002\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\022\uffbe\023\uffbe\025\uffbe\027\uffbe\042\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\055\uffbe\056\uffbe\001\002\000\030" +
    "\007\004\024\026\030\027\031\025\037\032\044\022\045" +
    "\016\046\041\073\035\074\024\075\020\001\002\000\056" +
    "\002\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\022\uffbc" +
    "\023\uffbc\025\uffbc\027\uffbc\042\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\055\uffbc\056\uffbc\001\002\000\004\002\167\001\002" +
    "\000\056\002\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\022\uffc1\023\uffc1\025\uffc1\027\uffc1\042\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\055\uffc1\056\uffc1\001\002\000\004\037\166" +
    "\001\002\000\034\006\021\007\004\024\026\030\027\031" +
    "\025\037\032\043\012\044\022\045\016\046\041\073\035" +
    "\074\024\075\020\001\002\000\004\037\163\001\002\000" +
    "\016\002\uffe1\022\uffe1\027\uffe1\052\uffe1\053\uffe1\056\uffe1" +
    "\001\002\000\034\006\021\007\004\024\026\030\027\031" +
    "\025\037\032\043\012\044\022\045\016\046\041\073\035" +
    "\074\024\075\020\001\002\000\056\002\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\022\uffbd\023\uffbd\025\uffbd\027" +
    "\uffbd\042\uffbd\051\uffbd\052\uffbd\053\uffbd\055\uffbd\056\uffbd" +
    "\001\002\000\034\006\021\007\004\024\026\030\027\031" +
    "\025\037\032\043\012\044\022\045\016\046\041\073\035" +
    "\074\024\075\020\001\002\000\006\002\001\027\001\001" +
    "\002\000\056\002\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\022\uffc2\023\uffc2\025\uffc2\027\uffc2\042\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\055\uffc2\056\uffc2\001\002\000\004\037" +
    "\141\001\002\000\004\004\137\001\002\000\056\002\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\022\uffc3\023\uffc3" +
    "\025\uffc3\027\uffc3\042\uffc3\051\uffc3\052\uffc3\053\uffc3\055" +
    "\uffc3\056\uffc3\001\002\000\056\002\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\022\uffbf\023\uffbf\025\uffbf\027\uffbf" +
    "\042\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\001" +
    "\002\000\056\002\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\022\uffc5\023\uffc5\025\uffc5\027\uffc5\042\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\055\uffc5\056\uffc5\001\002\000\056\002" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\022\uffc9\023" +
    "\uffc9\025\uffc9\027\uffc9\042\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\055\uffc9\056\uffc9\001\002\000\056\002\uffcc\005\uffcc\006" +
    "\uffcc\007\131\010\132\011\133\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\022\uffcc\023\uffcc\025\uffcc\027" +
    "\uffcc\042\uffcc\051\uffcc\052\uffcc\053\uffcc\055\uffcc\056\uffcc" +
    "\001\002\000\050\002\uffd0\005\uffd0\006\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\023\uffd0" +
    "\025\uffd0\027\uffd0\042\uffd0\051\uffd0\052\uffd0\053\uffd0\055" +
    "\uffd0\056\uffd0\001\002\000\050\002\uffd7\005\uffd7\006\uffd7" +
    "\012\065\013\064\014\063\015\062\016\061\017\066\022" +
    "\uffd7\023\uffd7\025\uffd7\027\uffd7\042\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\055\uffd7\056\uffd7\001\002\000\022\034\101\035" +
    "\111\036\102\037\104\040\107\060\106\061\103\063\110" +
    "\001\002\000\064\006\021\007\004\024\026\026\050\030" +
    "\027\031\025\037\032\043\012\044\022\045\016\046\041" +
    "\047\036\050\015\054\033\057\014\064\017\065\006\066" +
    "\031\067\007\070\030\071\047\072\013\073\035\074\024" +
    "\075\020\001\002\000\034\002\uffd9\005\055\006\056\022" +
    "\uffd9\023\uffd9\025\uffd9\027\uffd9\042\057\051\uffd9\052\uffd9" +
    "\053\uffd9\055\uffd9\056\uffd9\001\002\000\004\023\053\001" +
    "\002\000\034\006\021\007\004\024\026\030\027\031\025" +
    "\037\032\043\012\044\022\045\016\046\041\073\035\074" +
    "\024\075\020\001\002\000\016\002\uffe7\022\uffe7\027\uffe7" +
    "\052\uffe7\053\uffe7\056\uffe7\001\002\000\034\006\021\007" +
    "\004\024\026\030\027\031\025\037\032\043\012\044\022" +
    "\045\016\046\041\073\035\074\024\075\020\001\002\000" +
    "\034\006\021\007\004\024\026\030\027\031\025\037\032" +
    "\043\012\044\022\045\016\046\041\073\035\074\024\075" +
    "\020\001\002\000\034\006\021\007\004\024\026\030\027" +
    "\031\025\037\032\043\012\044\022\045\016\046\041\073" +
    "\035\074\024\075\020\001\002\000\050\002\uffd8\005\uffd8" +
    "\006\uffd8\012\065\013\064\014\063\015\062\016\061\017" +
    "\066\022\uffd8\023\uffd8\025\uffd8\027\uffd8\042\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\055\uffd8\056\uffd8\001\002\000\034\006" +
    "\021\007\004\024\026\030\027\031\025\037\032\043\012" +
    "\044\022\045\016\046\041\073\035\074\024\075\020\001" +
    "\002\000\034\006\021\007\004\024\026\030\027\031\025" +
    "\037\032\043\012\044\022\045\016\046\041\073\035\074" +
    "\024\075\020\001\002\000\034\006\021\007\004\024\026" +
    "\030\027\031\025\037\032\043\012\044\022\045\016\046" +
    "\041\073\035\074\024\075\020\001\002\000\034\006\021" +
    "\007\004\024\026\030\027\031\025\037\032\043\012\044" +
    "\022\045\016\046\041\073\035\074\024\075\020\001\002" +
    "\000\034\006\021\007\004\024\026\030\027\031\025\037" +
    "\032\043\012\044\022\045\016\046\041\073\035\074\024" +
    "\075\020\001\002\000\034\006\021\007\004\024\026\030" +
    "\027\031\025\037\032\043\012\044\022\045\016\046\041" +
    "\073\035\074\024\075\020\001\002\000\050\002\uffd1\005" +
    "\uffd1\006\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\022\uffd1\023\uffd1\025\uffd1\027\uffd1\042\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\001\002\000\050" +
    "\002\uffd5\005\uffd5\006\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5\025\uffd5\027\uffd5" +
    "\042\uffd5\051\uffd5\052\uffd5\053\uffd5\055\uffd5\056\uffd5\001" +
    "\002\000\050\002\uffd6\005\uffd6\006\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\023\uffd6\025" +
    "\uffd6\027\uffd6\042\uffd6\051\uffd6\052\uffd6\053\uffd6\055\uffd6" +
    "\056\uffd6\001\002\000\050\002\uffd3\005\uffd3\006\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3" +
    "\023\uffd3\025\uffd3\027\uffd3\042\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\055\uffd3\056\uffd3\001\002\000\050\002\uffd4\005\uffd4" +
    "\006\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\022\uffd4\023\uffd4\025\uffd4\027\uffd4\042\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\055\uffd4\056\uffd4\001\002\000\050\002" +
    "\uffd2\005\uffd2\006\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\022\uffd2\023\uffd2\025\uffd2\027\uffd2\042" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2\001\002" +
    "\000\030\002\uffda\022\uffda\023\uffda\025\uffda\027\uffda\042" +
    "\057\051\uffda\052\uffda\053\uffda\055\uffda\056\uffda\001\002" +
    "\000\026\002\uffdb\022\uffdb\023\uffdb\025\uffdb\027\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\001\002\000\004" +
    "\027\100\001\002\000\020\002\uffdc\004\uffdc\022\uffdc\027" +
    "\uffdc\052\uffdc\053\uffdc\056\uffdc\001\002\000\006\033\ufff4" +
    "\037\ufff4\001\002\000\006\033\ufff2\037\ufff2\001\002\000" +
    "\004\024\124\001\002\000\006\033\ufff0\037\ufff0\001\002" +
    "\000\004\037\123\001\002\000\004\026\113\001\002\000" +
    "\006\033\ufff1\037\ufff1\001\002\000\022\034\101\035\111" +
    "\036\102\037\104\040\107\060\106\061\103\063\110\001" +
    "\002\000\006\033\ufff3\037\ufff3\001\002\000\006\033\uffed" +
    "\037\uffed\001\002\000\022\034\101\035\111\036\102\037" +
    "\104\040\107\060\106\061\103\063\110\001\002\000\006" +
    "\022\121\027\uffec\001\002\000\004\037\120\001\002\000" +
    "\004\027\117\001\002\000\006\033\uffee\037\uffee\001\002" +
    "\000\006\022\uffea\027\uffea\001\002\000\022\034\101\035" +
    "\111\036\102\037\104\040\107\060\106\061\103\063\110" +
    "\001\002\000\004\027\uffeb\001\002\000\006\004\ufffc\022" +
    "\ufffc\001\002\000\004\073\125\001\002\000\004\025\126" +
    "\001\002\000\004\062\127\001\002\000\022\034\101\035" +
    "\111\036\102\037\104\040\107\060\106\061\103\063\110" +
    "\001\002\000\006\033\uffef\037\uffef\001\002\000\034\006" +
    "\021\007\004\024\026\030\027\031\025\037\032\043\012" +
    "\044\022\045\016\046\041\073\035\074\024\075\020\001" +
    "\002\000\034\006\021\007\004\024\026\030\027\031\025" +
    "\037\032\043\012\044\022\045\016\046\041\073\035\074" +
    "\024\075\020\001\002\000\034\006\021\007\004\024\026" +
    "\030\027\031\025\037\032\043\012\044\022\045\016\046" +
    "\041\073\035\074\024\075\020\001\002\000\050\002\uffcd" +
    "\005\uffcd\006\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\022\uffcd\023\uffcd\025\uffcd\027\uffcd\042\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd\001\002\000" +
    "\050\002\uffce\005\uffce\006\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\022\uffce\023\uffce\025\uffce\027" +
    "\uffce\042\uffce\051\uffce\052\uffce\053\uffce\055\uffce\056\uffce" +
    "\001\002\000\050\002\uffcf\005\uffcf\006\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\022\uffcf\023\uffcf" +
    "\025\uffcf\027\uffcf\042\uffcf\051\uffcf\052\uffcf\053\uffcf\055" +
    "\uffcf\056\uffcf\001\002\000\056\006\021\007\004\024\026" +
    "\026\050\030\027\031\025\037\032\043\012\044\022\045" +
    "\016\046\041\050\015\054\033\057\014\064\017\065\006" +
    "\066\031\067\007\070\030\073\035\074\024\075\020\001" +
    "\002\000\006\002\uffff\027\uffff\001\002\000\004\020\142" +
    "\001\002\000\022\034\101\035\111\036\102\037\104\040" +
    "\107\060\106\061\103\063\110\001\002\000\004\026\050" +
    "\001\002\000\006\004\ufffa\022\ufffa\001\002\000\004\021" +
    "\155\001\002\000\006\033\152\037\153\001\002\000\006" +
    "\021\ufff8\022\150\001\002\000\022\034\101\035\111\036" +
    "\102\037\104\040\107\060\106\061\103\063\110\001\002" +
    "\000\004\021\ufff7\001\002\000\004\037\154\001\002\000" +
    "\006\021\ufff5\022\ufff5\001\002\000\006\021\ufff6\022\ufff6" +
    "\001\002\000\020\002\ufff9\022\ufff9\026\ufff9\027\ufff9\052" +
    "\ufff9\053\ufff9\056\ufff9\001\002\000\004\055\157\001\002" +
    "\000\056\006\021\007\004\024\026\026\050\030\027\031" +
    "\025\037\032\043\012\044\022\045\016\046\041\050\015" +
    "\054\033\057\014\064\017\065\006\066\031\067\007\070" +
    "\030\073\035\074\024\075\020\001\002\000\004\056\161" +
    "\001\002\000\016\002\uffe4\022\uffe4\027\uffe4\052\uffe4\053" +
    "\uffe4\056\uffe4\001\002\000\016\002\uffe3\022\uffe3\027\uffe3" +
    "\052\uffe3\053\uffe3\056\uffe3\001\002\000\056\002\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\022\uffc7\023\uffc7\025" +
    "\uffc7\027\uffc7\042\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7" +
    "\056\uffc7\001\002\000\004\025\165\001\002\000\056\002" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\022\uffc8\023" +
    "\uffc8\025\uffc8\027\uffc8\042\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\055\uffc8\056\uffc8\001\002\000\056\002\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\022\uffc6\023\uffc6\025\uffc6\027" +
    "\uffc6\042\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6" +
    "\001\002\000\004\002\000\001\002\000\056\002\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\022\uffca\023\uffca\025" +
    "\uffca\027\uffca\042\uffca\051\uffca\052\uffca\053\uffca\055\uffca" +
    "\056\uffca\001\002\000\016\002\uffe0\022\uffe0\027\uffe0\052" +
    "\uffe0\053\uffe0\056\uffe0\001\002\000\004\051\173\001\002" +
    "\000\056\006\021\007\004\024\026\026\050\030\027\031" +
    "\025\037\032\043\012\044\022\045\016\046\041\050\015" +
    "\054\033\057\014\064\017\065\006\066\031\067\007\070" +
    "\030\073\035\074\024\075\020\001\002\000\006\052\175" +
    "\053\176\001\002\000\056\006\021\007\004\024\026\026" +
    "\050\030\027\031\025\037\032\043\012\044\022\045\016" +
    "\046\041\050\015\054\033\057\014\064\017\065\006\066" +
    "\031\067\007\070\030\073\035\074\024\075\020\001\002" +
    "\000\016\002\uffe6\022\uffe6\027\uffe6\052\uffe6\053\uffe6\056" +
    "\uffe6\001\002\000\004\053\200\001\002\000\016\002\uffe5" +
    "\022\uffe5\027\uffe5\052\uffe5\053\uffe5\056\uffe5\001\002\000" +
    "\004\020\142\001\002\000\016\002\uffde\022\uffde\027\uffde" +
    "\052\uffde\053\uffde\056\uffde\001\002\000\004\037\204\001" +
    "\002\000\006\004\ufffb\022\ufffb\001\002\000\056\002\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\022\uffcb\023\uffcb" +
    "\025\uffcb\027\uffcb\042\uffcb\051\uffcb\052\uffcb\053\uffcb\055" +
    "\uffcb\056\uffcb\001\002\000\010\047\036\071\047\072\013" +
    "\001\002\000\004\004\ufffd\001\002\000\016\002\uffe2\022" +
    "\uffe2\027\uffe2\052\uffe2\053\uffe2\056\uffe2\001\002\000\016" +
    "\002\uffdf\022\uffdf\027\uffdf\052\uffdf\053\uffdf\056\uffdf\001" +
    "\002\000\056\006\021\007\004\024\026\026\050\030\027" +
    "\031\025\037\032\043\012\044\022\045\016\046\041\050" +
    "\015\054\033\057\014\064\017\065\006\066\031\067\007" +
    "\070\030\073\035\074\024\075\020\001\002\000\014\002" +
    "\uffe8\027\uffe8\052\uffe8\053\uffe8\056\uffe8\001\002\000\056" +
    "\002\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\022\uffc4" +
    "\023\uffc4\025\uffc4\027\uffc4\042\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\055\uffc4\056\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\036\002\022\003\036\004\007\013\033\014" +
    "\004\015\010\016\051\017\050\020\045\021\044\022\043" +
    "\023\042\024\041\025\037\001\001\000\006\024\213\025" +
    "\037\001\001\000\002\001\001\000\022\016\210\017\050" +
    "\020\045\021\044\022\043\023\042\024\041\025\037\001" +
    "\001\000\022\016\207\017\050\020\045\021\044\022\043" +
    "\023\042\024\041\025\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\204\023\042\024\041\025\037" +
    "\001\001\000\004\010\202\001\001\000\002\001\001\000" +
    "\022\016\171\017\050\020\045\021\044\022\043\023\042" +
    "\024\041\025\037\001\001\000\002\001\001\000\022\016" +
    "\170\017\050\020\045\021\044\022\043\023\042\024\041" +
    "\025\037\001\001\000\002\001\001\000\010\023\167\024" +
    "\041\025\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\163\017" +
    "\050\020\045\021\044\022\043\023\042\024\041\025\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\161\017\050\020\045\021\044\022\043\023\042\024\041" +
    "\025\037\001\001\000\002\001\001\000\022\016\155\017" +
    "\050\020\045\021\044\022\043\023\042\024\041\025\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\104\001\001" +
    "\000\036\002\076\003\036\004\007\013\033\014\004\015" +
    "\010\016\051\017\050\020\045\021\044\022\043\023\042" +
    "\024\041\025\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\053\017\050\020\045\021\044\022\043" +
    "\023\042\024\041\025\037\001\001\000\002\001\001\000" +
    "\022\016\075\017\050\020\045\021\044\022\043\023\042" +
    "\024\041\025\037\001\001\000\020\017\074\020\045\021" +
    "\044\022\043\023\042\024\041\025\037\001\001\000\016" +
    "\020\057\021\044\022\043\023\042\024\041\025\037\001" +
    "\001\000\002\001\001\000\014\021\073\022\043\023\042" +
    "\024\041\025\037\001\001\000\014\021\072\022\043\023" +
    "\042\024\041\025\037\001\001\000\014\021\071\022\043" +
    "\023\042\024\041\025\037\001\001\000\014\021\070\022" +
    "\043\023\042\024\041\025\037\001\001\000\014\021\067" +
    "\022\043\023\042\024\041\025\037\001\001\000\014\021" +
    "\066\022\043\023\042\024\041\025\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\114\011\115\012\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\114\011\121\012" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\127\001\001\000\002\001\001\000\012\022\135\023\042" +
    "\024\041\025\037\001\001\000\012\022\134\023\042\024" +
    "\041\025\037\001\001\000\012\022\133\023\042\024\041" +
    "\025\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\013\137\014\004\015\010\016\051" +
    "\017\050\020\045\021\044\022\043\023\042\024\041\025" +
    "\037\001\001\000\002\001\001\000\004\005\142\001\001" +
    "\000\010\006\144\007\146\010\145\001\001\000\004\015" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\150\007\146\010" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\157\014\004\015\010\016\051\017\050" +
    "\020\045\021\044\022\043\023\042\024\041\025\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\013\173\014\004\015" +
    "\010\016\051\017\050\020\045\021\044\022\043\023\042" +
    "\024\041\025\037\001\001\000\002\001\001\000\030\013" +
    "\176\014\004\015\010\016\051\017\050\020\045\021\044" +
    "\022\043\023\042\024\041\025\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\206\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\013\212\014\004\015\010\016\051\017\050\020\045" +
    "\021\044\022\043\023\042\024\041\025\037\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ProyectSyntaxAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ProyectSyntaxAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ProyectSyntaxAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	error = new ProyectErrorMgmt();
	ProyectLexicalAnalyzer lex = (ProyectLexicalAnalyzer)getScanner();
	lex.setErrorMgmt(error);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	private ProyectErrorMgmt error;
	public void syntax_error(Symbol lexicalUnit){
		error.syntaxError((LexicalUnit) lexicalUnit);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ProyectSyntaxAnalyzer$actions {


	private ASProyect as = new ASProyect();

  private final ProyectSyntaxAnalyzer parser;

  /** Constructor */
  CUP$ProyectSyntaxAnalyzer$actions(ProyectSyntaxAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ProyectSyntaxAnalyzer$do_action_part00000000(
    int                        CUP$ProyectSyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$ProyectSyntaxAnalyzer$parser,
    java.util.Stack            CUP$ProyectSyntaxAnalyzer$stack,
    int                        CUP$ProyectSyntaxAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ProyectSyntaxAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$ProyectSyntaxAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Si 
            {
              Object RESULT =null;
		Location sixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location sixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Si si = (Si)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.progIns(si); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ProyectSyntaxAnalyzer$parser.done_parsing();
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Sd END Si 
            {
              Object RESULT =null;
		Location sdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location sdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		Sd sd = (Sd)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location sixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location sixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Si si = (Si)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.decIns(sd, si); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sd ::= D 
            {
              Sd RESULT =null;
		Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Sd dec = (Sd)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.dSimple(dec); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sd",1, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sd ::= D PYCOMA Sd 
            {
              Sd RESULT =null;
		Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		Sd dec = (Sd)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location sdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location sdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Sd sd = (Sd)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.dCompuesta(sd, dec); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sd",1, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= VAR T IDEN 
            {
              Sd RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.decVar(tipo, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("D",2, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // D ::= TYPE T IDEN 
            {
              Sd RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.decTipo(tipo, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("D",2, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // D ::= PROC IDEN Parametros B 
            {
              Sd RESULT =null;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location paramxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location paramxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		Sp param = (Sp)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		Location bloquexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location bloquexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		B bloque = (B)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.decProc(id_lex, param, bloque); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("D",2, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Parametros ::= PARAB Sp PARCE 
            {
              Sp RESULT =null;
		Location spxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location spxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		Sp sp = (Sp)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.secParam(sp); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Parametros",3, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sp ::= P 
            {
              Sp RESULT =null;
		Location paramxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location paramxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Sp param = (Sp)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.parSimple(p.type(), p.id()); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sp",4, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sp ::= P PYCOMA Sp 
            {
              Sp RESULT =null;
		Location paramxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location paramxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		Sp param = (Sp)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location spxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location spxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Sp sp = (Sp)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.parCompuesta(p.type(), p.id(), sp); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sp",4, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // P ::= T UMPERSAND IDEN 
            {
              Sp RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.parSimple(tipo, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("P",5, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // P ::= T IDEN 
            {
              Sp RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.parSimple(tipo, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("P",5, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // T ::= INT 
            {
              T RESULT =null;
		 RESULT= as.tInt(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // T ::= REAL 
            {
              T RESULT =null;
		 RESULT= as.tReal(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // T ::= BOOL 
            {
              T RESULT =null;
		 RESULT= as.tBool(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // T ::= STRING 
            {
              T RESULT =null;
		 RESULT= as.tString(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // T ::= IDEN 
            {
              T RESULT =null;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.iden(id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // T ::= ARRAY CORAB NUMINT CORCE OF T 
            {
              T RESULT =null;
		Location tamxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).xleft;
		Location tamxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).xright;
		String tam = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.tArray(tam, tipo); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // T ::= RECORD LLAAB Sc LLACE 
            {
              T RESULT =null;
		Location scxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location scxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		Sc sc = (Sc)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.tRecord(sc); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T ::= POINTER T 
            {
              T RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.tPointer(tipo); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",6, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sc ::= C 
            {
              Sc RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Sc c = (Sc)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.campoSimple(c.tipo(), c.id()); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sc",7, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sc ::= C PYCOMA Sc 
            {
              Sc RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		Sc c = (Sc)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location scxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location scxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Sc sc = (Sc)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.campoCompuesto(c.tipo(), c.id(), sc); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sc",7, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= T IDEN 
            {
              Sc RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.campoSimple(tipo, id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("C",8, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Si ::= I 
            {
              Si RESULT =null;
		Location insxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location insxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Si ins = (Si)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insSimple(ins); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Si",9, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Si ::= I PYCOMA Si 
            {
              Si RESULT =null;
		Location insxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location insxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		Si ins = (Si)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location sixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location sixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Si si = (Si)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insCompuesta(ins, si.a); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Si",9, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // I ::= E0 IGUAL E0 
            {
              Si RESULT =null;
		Location e0_0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e0_0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e0_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e0_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e0_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e0_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.asig(e0_0, e0_1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // I ::= IF E0 THEN Si ENDIF 
            {
              Si RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).xright;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		Location sixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location sixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		Si si = (Si)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.iif(e0, si); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // I ::= IF E0 THEN Si ELSE Si ENDIF 
            {
              Si RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-5)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-5)).xright;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-5)).value;
		Location si0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).xleft;
		Location si0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).xright;
		Si si0 = (Si)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		Location si1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location si1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		Si si1 = (Si)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.ifElse(e0, si0, si1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // I ::= WHILE E0 DO Si ENDWHILE 
            {
              Si RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).xright;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-3)).value;
		Location sixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location sixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		Si si = (Si)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.wwhile(e0, si); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // I ::= READ E0 
            {
              Si RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.read(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // I ::= WRITE E0 
            {
              Si RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.write(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // I ::= NL 
            {
              Si RESULT =null;
		 RESULT= as.nl(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // I ::= NEW E0 
            {
              Si RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insNew(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // I ::= DELETE E0 
            {
              Si RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insDelete(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // I ::= CALL IDEN Parametros 
            {
              Si RESULT =null;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		Location paramxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location paramxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		Sp param = (Sp)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insCall(id_lex, param); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // I ::= B 
            {
              Si RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		B b = (B)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.insBloque(b); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // B ::= LLAAB Programa LLACE 
            {
              B RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.bloque(p); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("B",11, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E0 ::= E1 MAS E0 
            {
              E RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.suma(e1, e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",12, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E0 ::= E1 MENOS E1 
            {
              E RESULT =null;
		Location e1_0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e1_0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e1_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e1_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e1_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e1_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.resta(e1, e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",12, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E0 ::= E1 
            {
              E RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e1; };
	E1::= E1: e1 AND E2: e2
		{: RESULT= as.and(e1, e2); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",12, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E1 ::= E1 OR E2 
            {
              E RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.or(e1, e2); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",13, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E1 ::= E2 
            {
              E RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e2; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",13, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E2 ::= E2 MENOR E3 
            {
              E RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.menor(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E2 ::= E2 MAYOR E3 
            {
              E RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.mayor(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E2 ::= E2 MENORIGUAL E3 
            {
              E RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.menorIgual(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E2 ::= E2 MAYORIGUAL E3 
            {
              E RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.mayorIgual(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E2 ::= E2 EQUIV E3 
            {
              E RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.equiv(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E2 ::= E2 NONEQUIV E3 
            {
              E RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.nonEquiv(e2, e3); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E2 ::= E3 
            {
              E RESULT =null;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e3; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",14, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E3 ::= E4 MULT E4 
            {
              E RESULT =null;
		Location e4_0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e4_0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e4_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e4_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e4_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e4_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.mult(e4_0, e4_1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",15, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E3 ::= E4 DIV E4 
            {
              E RESULT =null;
		Location e4_0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e4_0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e4_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e4_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e4_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e4_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.div(d4_0, e4_1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",15, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E3 ::= E4 RESTO E4 
            {
              E RESULT =null;
		Location e4_0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xleft;
		Location e4_0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).xright;
		E e4_0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)).value;
		Location e4_1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e4_1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e4_1 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.resto(d4_0, d4_1); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",15, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E3 ::= E4 
            {
              E RESULT =null;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e4 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e4; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",15, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E4 ::= NOT E4 
            {
              E RESULT =null;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e4 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.not(e4); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",16, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= MENOS E5 
            {
              E RESULT =null;
		Location e5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e5 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.menos(e5); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",16, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= E5 
            {
              E RESULT =null;
		Location e5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e5 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e5; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",16, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E5 ::= CORAB E0 CORCE 
            {
              E RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).xright;
		E e0 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)).value;
		 RESULT= as.index(e0); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= PUNTO IDEN 
            {
              E RESULT =null;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.access(id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= FLECHA IDEN 
            {
              E RESULT =null;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.access(id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= E6 
            {
              E RESULT =null;
		Location e6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e6 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e6; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E6 ::= MULT E6 
            {
              E RESULT =null;
		Location e6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e6 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.indirec(e6); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.elementAt(CUP$ProyectSyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E6 ::= E7 
            {
              E RESULT =null;
		Location e7xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location e7xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		E e7 = (E)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT=e7; 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E6",18, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E7 ::= NUMINT 
            {
              E RESULT =null;
		Location int_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location int_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String int_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.numInt(int_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= NUMREAL 
            {
              E RESULT =null;
		Location real_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location real_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String real_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.numReal(real_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= TRUE 
            {
              E RESULT =null;
		 RESULT= as.true(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= FALSE 
            {
              E RESULT =null;
		 RESULT= as.false(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= CADENA 
            {
              E RESULT =null;
		Location cad_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location cad_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String cad_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.cadena(cad_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= IDEN 
            {
              E RESULT =null;
		Location id_lexxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xleft;
		Location id_lexxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ProyectSyntaxAnalyzer$stack.peek()).xright;
		String id_lex = (String)((java_cup.runtime.Symbol) CUP$ProyectSyntaxAnalyzer$stack.peek()).value;
		 RESULT= as.iden(id_lex); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= NULL 
            {
              E RESULT =null;
		 RESULT= as.null(); 
              CUP$ProyectSyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E7",19, ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$ProyectSyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$ProyectSyntaxAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ProyectSyntaxAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ProyectSyntaxAnalyzer$do_action(
    int                        CUP$ProyectSyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$ProyectSyntaxAnalyzer$parser,
    java.util.Stack            CUP$ProyectSyntaxAnalyzer$stack,
    int                        CUP$ProyectSyntaxAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$ProyectSyntaxAnalyzer$do_action_part00000000(
                               CUP$ProyectSyntaxAnalyzer$act_num,
                               CUP$ProyectSyntaxAnalyzer$parser,
                               CUP$ProyectSyntaxAnalyzer$stack,
                               CUP$ProyectSyntaxAnalyzer$top);
    }
}

