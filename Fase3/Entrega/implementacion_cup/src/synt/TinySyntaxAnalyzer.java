
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Mar 18 11:02:39 CET 2020
//----------------------------------------------------

package synt;

import java_cup.runtime.*;
import lex.TinyLexicalAnalyzer;
import lex.LexicalUnit;
import err.TinyErrorMgmt;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Mar 18 11:02:39 CET 2020
  */
public class TinySyntaxAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TinySyntaxAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public TinySyntaxAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TinySyntaxAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\005\005\000\002\005\002" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\010\005\000\002\011\005\000\002" +
    "\011\002\000\002\012\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\002\000\002\014\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\002\000\002\016\004\000" +
    "\002\017\004\000\002\017\003\000\002\020\004\000\002" +
    "\021\005\000\002\021\005\000\002\021\002\000\002\022" +
    "\004\000\002\022\004\000\002\022\003\000\002\023\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\010\004\012\005\006\006\007\001\002\000" +
    "\004\007\110\001\002\000\004\002\107\001\002\000\004" +
    "\007\ufffa\001\002\000\004\007\ufff9\001\002\000\006\030" +
    "\103\031\ufffc\001\002\000\004\031\013\001\002\000\004" +
    "\007\ufffb\001\002\000\004\007\014\001\002\000\004\020" +
    "\023\001\002\000\006\002\ufff5\030\020\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufff8\001\002\000\004\007" +
    "\014\001\002\000\006\002\ufff5\030\020\001\002\000\004" +
    "\002\ufff6\001\002\000\022\007\030\010\025\011\031\024" +
    "\024\027\036\032\026\033\032\034\027\001\002\000\022" +
    "\007\030\010\025\011\031\024\024\027\036\032\026\033" +
    "\032\034\027\001\002\000\056\002\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\001" +
    "\002\000\056\002\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\001\002\000\022\007" +
    "\030\010\025\011\031\024\024\027\036\032\026\033\032" +
    "\034\027\001\002\000\056\002\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\001\002" +
    "\000\056\002\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\001\002\000\056\002\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\001\002\000\056\002\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\001" +
    "\002\000\056\002\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\071\026\072\027\uffe6\030\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\001\002\000\036\007" +
    "\030\010\025\011\031\014\062\015\065\016\067\017\063" +
    "\021\066\022\061\024\024\027\036\032\026\033\032\034" +
    "\027\001\002\000\016\007\030\010\025\011\031\032\026" +
    "\033\032\034\027\001\002\000\020\002\uffed\012\051\013" +
    "\052\023\uffed\024\uffed\030\uffed\035\uffed\001\002\000\014" +
    "\002\ufff1\023\043\024\044\030\ufff1\035\ufff1\001\002\000" +
    "\006\002\ufff7\030\ufff7\001\002\000\010\002\ufff4\030\ufff4" +
    "\035\ufff4\001\002\000\022\007\030\010\025\011\031\024" +
    "\024\027\036\032\026\033\032\034\027\001\002\000\022" +
    "\007\030\010\025\011\031\024\024\027\036\032\026\033" +
    "\032\034\027\001\002\000\014\002\ufff1\023\043\024\044" +
    "\030\ufff1\035\ufff1\001\002\000\010\002\ufff2\030\ufff2\035" +
    "\ufff2\001\002\000\014\002\ufff1\023\043\024\044\030\ufff1" +
    "\035\ufff1\001\002\000\010\002\ufff3\030\ufff3\035\ufff3\001" +
    "\002\000\022\007\030\010\025\011\031\024\024\027\036" +
    "\032\026\033\032\034\027\001\002\000\022\007\030\010" +
    "\025\011\031\024\024\027\036\032\026\033\032\034\027" +
    "\001\002\000\014\002\ufff0\023\ufff0\024\ufff0\030\ufff0\035" +
    "\ufff0\001\002\000\014\002\uffee\023\uffee\024\uffee\030\uffee" +
    "\035\uffee\001\002\000\014\002\uffef\023\uffef\024\uffef\030" +
    "\uffef\035\uffef\001\002\000\056\002\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\001" +
    "\002\000\022\007\030\010\025\011\031\024\024\027\036" +
    "\032\026\033\032\034\027\001\002\000\020\002\uffea\012" +
    "\uffea\013\uffea\023\uffea\024\uffea\030\uffea\035\uffea\001\002" +
    "\000\022\007\uffd7\010\uffd7\011\uffd7\024\uffd7\027\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\001\002\000\022\007\uffdb\010\uffdb" +
    "\011\uffdb\024\uffdb\027\uffdb\032\uffdb\033\uffdb\034\uffdb\001" +
    "\002\000\022\007\uffda\010\uffda\011\uffda\024\uffda\027\uffda" +
    "\032\uffda\033\uffda\034\uffda\001\002\000\020\002\uffec\012" +
    "\uffec\013\uffec\023\uffec\024\uffec\030\uffec\035\uffec\001\002" +
    "\000\022\007\uffdc\010\uffdc\011\uffdc\024\uffdc\027\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\001\002\000\022\007\uffd8\010\uffd8" +
    "\011\uffd8\024\uffd8\027\uffd8\032\uffd8\033\uffd8\034\uffd8\001" +
    "\002\000\022\007\uffd9\010\uffd9\011\uffd9\024\uffd9\027\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\001\002\000\020\002\uffeb\012" +
    "\uffeb\013\uffeb\023\uffeb\024\uffeb\030\uffeb\035\uffeb\001\002" +
    "\000\022\007\030\010\025\011\031\024\024\027\036\032" +
    "\026\033\032\034\027\001\002\000\022\007\030\010\025" +
    "\011\031\024\024\027\036\032\026\033\032\034\027\001" +
    "\002\000\052\002\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\001\002\000\022\007\030\010\025\011" +
    "\031\024\024\027\036\032\026\033\032\034\027\001\002" +
    "\000\052\002\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\001\002\000\022\007\030\010\025\011\031" +
    "\024\024\027\036\032\026\033\032\034\027\001\002\000" +
    "\052\002\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\027\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\001\002\000\004\035\101\001\002\000\056\002" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\001\002\000\056\002\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\001\002\000\010\004\012\005\006\006\007\001\002\000" +
    "\004\031\uffff\001\002\000\006\030\103\031\ufffc\001\002" +
    "\000\004\031\ufffd\001\002\000\004\002\000\001\002\000" +
    "\006\030\ufffe\031\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\012\002\004\003\010\004\007\006\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\015\010\014\001\001" +
    "\000\002\001\001\000\004\011\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\020\001\001\000\004" +
    "\011\021\001\001\000\002\001\001\000\016\012\040\014" +
    "\037\016\036\020\034\022\033\023\032\001\001\000\006" +
    "\022\101\023\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\077\014\037\016\036\020\034\022\033" +
    "\023\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\072\001\001" +
    "\000\014\017\063\020\057\022\033\023\032\024\056\001" +
    "\001\000\004\023\055\001\001\000\004\015\052\001\001" +
    "\000\004\013\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\046\016\036\020\034\022\033\023\032" +
    "\001\001\000\014\014\044\016\036\020\034\022\033\023" +
    "\032\001\001\000\004\013\045\001\001\000\002\001\001" +
    "\000\004\013\047\001\001\000\002\001\001\000\014\014" +
    "\054\016\036\020\034\022\033\023\032\001\001\000\012" +
    "\016\053\020\034\022\033\023\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\067\022\033\023\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\075\023\032" +
    "\001\001\000\006\022\073\023\032\001\001\000\002\001" +
    "\001\000\010\020\074\022\033\023\032\001\001\000\002" +
    "\001\001\000\010\020\076\022\033\023\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\104\006\003\001\001\000\002\001" +
    "\001\000\004\005\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TinySyntaxAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TinySyntaxAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TinySyntaxAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	error = new TinyErrorMgmt();
	TinyLexicalAnalyzer lex = (TinyLexicalAnalyzer)getScanner();
	lex.setErrorMgmt(error);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	private TinyErrorMgmt error;
	public void syntax_error(Symbol lexicalUnit){
		error.syntaxError((LexicalUnit) lexicalUnit);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TinySyntaxAnalyzer$actions {
  private final TinySyntaxAnalyzer parser;

  /** Constructor */
  CUP$TinySyntaxAnalyzer$actions(TinySyntaxAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TinySyntaxAnalyzer$do_action_part00000000(
    int                        CUP$TinySyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$TinySyntaxAnalyzer$parser,
    java.util.Stack            CUP$TinySyntaxAnalyzer$stack,
    int                        CUP$TinySyntaxAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TinySyntaxAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$TinySyntaxAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Sd END Si 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TinySyntaxAnalyzer$stack.elementAt(CUP$TinySyntaxAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$TinySyntaxAnalyzer$parser.done_parsing();
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Sd ::= D DEC 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sd",1, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // D ::= T VAR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("D",2, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEC ::= SEMICOLON D DEC 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("DEC",3, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEC ::= 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("DEC",3, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T ::= INT 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",4, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T ::= REAL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",4, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // T ::= BOOL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",4, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Si ::= I INS 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Si",5, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= VAR EQUAL E0 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",6, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INS ::= SEMICOLON I INS 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("INS",7, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INS ::= 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("INS",7, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E0 ::= E1 EE0 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",8, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EE0 ::= PLUS E1 EE0 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE0",9, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EE0 ::= MINUS E1 EE0 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE0",9, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EE0 ::= 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE0",9, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E1 ::= E2 EE1 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",10, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EE1 ::= AND E1 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE1",11, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EE1 ::= OR E2 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE1",11, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EE1 ::= 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE1",11, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E2 ::= E3 EE2 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",12, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EE2 ::= OP E3 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE2",13, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EE2 ::= E3 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE2",13, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E3 ::= E4 EE3 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",14, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EE3 ::= MULT E4 E3 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE3",15, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EE3 ::= DIV E4 E3 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE3",15, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EE3 ::= 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("EE3",15, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E4 ::= MINUS E4 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",16, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E4 ::= NOT E5 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",16, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",16, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E5 ::= OPPAR E0 CLPAR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E5 ::= VAR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E5 ::= NUMREAL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E5 ::= NUMINT 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E5 ::= TRUE 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E5 ::= FALSE 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",17, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= MINOR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",18, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= MAYOR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",18, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP ::= MINOREQUAL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",18, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP ::= MAYOREQUAL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",18, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= EQUIV 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",18, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= DISEQUIV 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",18, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TinySyntaxAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TinySyntaxAnalyzer$do_action(
    int                        CUP$TinySyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$TinySyntaxAnalyzer$parser,
    java.util.Stack            CUP$TinySyntaxAnalyzer$stack,
    int                        CUP$TinySyntaxAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$TinySyntaxAnalyzer$do_action_part00000000(
                               CUP$TinySyntaxAnalyzer$act_num,
                               CUP$TinySyntaxAnalyzer$parser,
                               CUP$TinySyntaxAnalyzer$stack,
                               CUP$TinySyntaxAnalyzer$top);
    }
}

