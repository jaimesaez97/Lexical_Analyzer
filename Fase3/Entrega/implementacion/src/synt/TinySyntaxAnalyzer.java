
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Mar 20 11:21:46 CET 2020
//----------------------------------------------------

package synt;

import java_cup.runtime.*;
import lex.LexicalUnit;
import lex.TinyLexicalAnalyzer;
import err.TinyErrorMgmt;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Mar 20 11:21:46 CET 2020
  */
public class TinySyntaxAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TinySyntaxAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public TinySyntaxAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TinySyntaxAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\004\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\006\005\000\002\007\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\012\005\000\002\012\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\014\004\000\002\014\004\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\010\004\012\005\005\006\007\001\002\000" +
    "\004\007\073\001\002\000\004\007\ufffb\001\002\000\004" +
    "\002\072\001\002\000\004\007\ufffa\001\002\000\006\030" +
    "\070\031\uffff\001\002\000\004\031\013\001\002\000\004" +
    "\007\ufffc\001\002\000\004\007\014\001\002\000\004\020" +
    "\021\001\002\000\006\002\ufff9\030\017\001\002\000\004" +
    "\002\001\001\002\000\004\007\014\001\002\000\004\002" +
    "\ufff8\001\002\000\022\007\026\010\023\011\027\024\022" +
    "\027\035\032\024\033\030\034\025\001\002\000\022\007" +
    "\026\010\023\011\027\024\022\027\035\032\024\033\030" +
    "\034\025\001\002\000\040\002\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\030\uffe4\035\uffe4\001\002\000" +
    "\040\002\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\030\uffe6\035\uffe6\001\002\000\022\007\026\010\023" +
    "\011\027\024\022\027\035\032\024\033\030\034\025\001" +
    "\002\000\040\002\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\030\uffe7\035\uffe7\001\002\000\040\002\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3" +
    "\035\uffe3\001\002\000\040\002\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\030\uffe5\035\uffe5\001\002\000" +
    "\040\002\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\030\uffe9\035\uffe9\001\002\000\040\002\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\030\uffec\035\uffec" +
    "\001\002\000\040\002\uffef\012\uffef\013\uffef\014\061\015" +
    "\053\016\055\017\057\021\054\022\052\023\uffef\024\uffef" +
    "\025\056\026\060\030\uffef\035\uffef\001\002\000\020\002" +
    "\ufff1\012\045\013\046\023\ufff1\024\ufff1\030\ufff1\035\ufff1" +
    "\001\002\000\016\007\026\010\023\011\027\032\024\033" +
    "\030\034\025\001\002\000\014\002\ufff4\023\042\024\ufff4" +
    "\030\ufff4\035\ufff4\001\002\000\010\002\ufff7\024\040\030" +
    "\ufff7\001\002\000\022\007\026\010\023\011\027\024\022" +
    "\027\035\032\024\033\030\034\025\001\002\000\012\002" +
    "\ufff5\024\ufff5\030\ufff5\035\ufff5\001\002\000\022\007\026" +
    "\010\023\011\027\024\022\027\035\032\024\033\030\034" +
    "\025\001\002\000\012\002\ufff6\024\ufff6\030\ufff6\035\ufff6" +
    "\001\002\000\040\002\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\030\uffea\035\uffea\001\002\000\022\007" +
    "\026\010\023\011\027\024\022\027\035\032\024\033\030" +
    "\034\025\001\002\000\022\007\026\010\023\011\027\024" +
    "\022\027\035\032\024\033\030\034\025\001\002\000\014" +
    "\002\ufff2\023\ufff2\024\ufff2\030\ufff2\035\ufff2\001\002\000" +
    "\014\002\ufff3\023\ufff3\024\ufff3\030\ufff3\035\ufff3\001\002" +
    "\000\022\007\026\010\023\011\027\024\022\027\035\032" +
    "\024\033\030\034\025\001\002\000\022\007\uffdd\010\uffdd" +
    "\011\uffdd\024\uffdd\027\uffdd\032\uffdd\033\uffdd\034\uffdd\001" +
    "\002\000\022\007\uffe2\010\uffe2\011\uffe2\024\uffe2\027\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\001\002\000\022\007\uffde\010" +
    "\uffde\011\uffde\024\uffde\027\uffde\032\uffde\033\uffde\034\uffde" +
    "\001\002\000\022\007\uffdf\010\uffdf\011\uffdf\024\uffdf\027" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\001\002\000\022\007\026" +
    "\010\023\011\027\024\022\027\035\032\024\033\030\034" +
    "\025\001\002\000\022\007\uffe0\010\uffe0\011\uffe0\024\uffe0" +
    "\027\uffe0\032\uffe0\033\uffe0\034\uffe0\001\002\000\022\007" +
    "\026\010\023\011\027\024\022\027\035\032\024\033\030" +
    "\034\025\001\002\000\022\007\uffe1\010\uffe1\011\uffe1\024" +
    "\uffe1\027\uffe1\032\uffe1\033\uffe1\034\uffe1\001\002\000\040" +
    "\002\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\030\uffed\035\uffed\001\002\000\040\002\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee\035\uffee\001" +
    "\002\000\024\002\ufff0\012\ufff0\013\ufff0\023\ufff0\024\ufff0" +
    "\025\056\026\060\030\ufff0\035\ufff0\001\002\000\006\024" +
    "\040\035\066\001\002\000\040\002\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\035\uffe8\001\002" +
    "\000\040\002\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\030\uffeb\035\uffeb\001\002\000\010\004\012\005" +
    "\005\006\007\001\002\000\004\031\ufffe\001\002\000\004" +
    "\002\000\001\002\000\006\030\ufffd\031\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\012\002\005\003\010\004\007\005\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\015\007\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\017\007\014\001\001\000\002\001\001\000\016\010\036" +
    "\011\035\012\033\013\032\014\031\015\030\001\001\000" +
    "\006\014\066\015\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\064\011\035\012\033\013\032\014" +
    "\031\015\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\050\001\001\000\002\001\001\000\004\015\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\040\012\033\013\032\014\031\015\030\001\001\000\002" +
    "\001\001\000\014\011\042\012\033\013\032\014\031\015" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\047\012\033\013\032\014\031\015\030\001\001\000" +
    "\012\012\046\013\032\014\031\015\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\063\014\031\015" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\062\015\030\001" +
    "\001\000\002\001\001\000\006\014\061\015\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\070\004\007\005\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TinySyntaxAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TinySyntaxAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TinySyntaxAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	error = new TinyErrorMgmt();
	TinyLexicalAnalyzer lex = (TinyLexicalAnalyzer)getScanner();
	lex.setErrorMgmt(error);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	private TinyErrorMgmt error;
	public void syntax_error(Symbol lexicalUnit){
		error.syntaxError((LexicalUnit)lexicalUnit);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TinySyntaxAnalyzer$actions {
  private final TinySyntaxAnalyzer parser;

  /** Constructor */
  CUP$TinySyntaxAnalyzer$actions(TinySyntaxAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TinySyntaxAnalyzer$do_action_part00000000(
    int                        CUP$TinySyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$TinySyntaxAnalyzer$parser,
    java.util.Stack            CUP$TinySyntaxAnalyzer$stack,
    int                        CUP$TinySyntaxAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TinySyntaxAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$TinySyntaxAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Sd END Si 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TinySyntaxAnalyzer$stack.elementAt(CUP$TinySyntaxAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$TinySyntaxAnalyzer$parser.done_parsing();
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Sd ::= D 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sd",1, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Sd ::= D SEMICOLON Sd 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Sd",1, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // D ::= T VAR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("D",2, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T ::= INT 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",3, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T ::= REAL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",3, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // T ::= BOOL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("T",3, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Si ::= I 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Si",4, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Si ::= I SEMICOLON Si 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("Si",4, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= VAR EQUAL E0 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("I",5, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E0 ::= E1 PLUS E1 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",6, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E0 ::= E0 MINUS E1 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",6, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E0",6, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E1 ::= E2 AND E1 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",7, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E1 ::= E2 OR E2 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",7, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E1",7, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E2 ::= E3 OP E3 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",8, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E2",8, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E3 ::= E3 MULT E4 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",9, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E3 ::= E3 DIV E4 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",9, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E3",9, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E4 ::= MINUS E4 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",10, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E4 ::= NOT E5 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",10, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E4",10, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E5 ::= OPPAR E0 CLPAR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E5 ::= VAR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E5 ::= NUMREAL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E5 ::= NUMINT 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E5 ::= TRUE 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E5 ::= FALSE 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("E5",11, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP ::= MINOR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",12, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP ::= MAYOR 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",12, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP ::= MINOREQUAL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",12, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP ::= MAYOREQUAL 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",12, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP ::= EQUIV 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",12, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP ::= DISEQUIV 
            {
              Object RESULT =null;

              CUP$TinySyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OP",12, RESULT);
            }
          return CUP$TinySyntaxAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TinySyntaxAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TinySyntaxAnalyzer$do_action(
    int                        CUP$TinySyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$TinySyntaxAnalyzer$parser,
    java.util.Stack            CUP$TinySyntaxAnalyzer$stack,
    int                        CUP$TinySyntaxAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$TinySyntaxAnalyzer$do_action_part00000000(
                               CUP$TinySyntaxAnalyzer$act_num,
                               CUP$TinySyntaxAnalyzer$parser,
                               CUP$TinySyntaxAnalyzer$stack,
                               CUP$TinySyntaxAnalyzer$top);
    }
}
