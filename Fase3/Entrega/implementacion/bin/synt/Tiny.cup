package asint;

import java_cup.runtime.*;
import lex.TinyLexicalAnalyzer;
import lex.LexicalUnit;
import err.TinyErrorMgmt;

scan with {: return getScanner().next_token(); :};
parser code {:
	private TinyErrorMgmt error;
	public void syntax_error(Symbol lexicalUnit){
		error.syntaxError((LexicalUnit)lexicalUnit);
	}
:};
init with {:
	error = new TinyErrorMgmt();
	TinyLexicalAnalyzer lex = (TinyLexicalAnalyzer)getScanner();
	lex.setErrorMgmt(error);
:};

terminal	INT, REAL, BOOL, VAR, TRUE, FALSE, 
		AND, OR, MAYOR, MINOR, MAYOREQUAL, MINOREQUAL, EQUAL,
		EQUIV, DISEQUIV, PLUS, MINUS, MULT, DIV, NOT,
		SEMICOLON, END, NUMREAL, NUMINT, OPPAR, CLPAR;

non terminal	S, Sd, D, T, Si, I, E0, E1,
		E2, E3, E4, E5, OP;

S	::= Sd END Si ;
Sd	::= D | D SEMICOLON Sd ;
D	::= T VAR ;
T	::= INT | REAL | BOOL ;

Si	::= I | I SEMICOLON Si ;
I	::= VAR EQUAL E0 ;

E0	::= E1 PLUS E1 | E0 MINUS E1 | E1 ;
E1	::= E2 AND E1 | E2 OR E2 | E2 ;
E2	::= E3 OP E3 | E3 ;
E3	::= E3 MULT E4 | E3 DIV E4 | E4 ;
E4	::= MINUS E4 | NOT E5 | E5 ;
E5	::= OPPAR E0 CLPAR | VAR | NUMREAL | NUMINT | TRUE | FALSE ;
OP	::= MINOR | MAYOR | MINOREQUAL | MAYOREQUAL | EQUIV | DISEQUIV ;
